
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.apromore.data_access.service_manager;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Logger;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.mail.util.ByteArrayDataSource;

import org.apromore.data_access.commons.Constants;
import org.apromore.data_access.dao.DomainDao;
import org.apromore.data_access.dao.EditSessionDao;
import org.apromore.data_access.dao.FormatDao;
import org.apromore.data_access.dao.ProcessDao;
import org.apromore.data_access.dao.UserDao;
import org.apromore.data_access.model_manager.DeleteEditSessionInputMsgType;
import org.apromore.data_access.model_manager.DeleteEditSessionOutputMsgType;
import org.apromore.data_access.model_manager.DeleteProcessVersionsInputMsgType;
import org.apromore.data_access.model_manager.DeleteProcessVersionsOutputMsgType;
import org.apromore.data_access.model_manager.DomainsType;
import org.apromore.data_access.model_manager.EditProcessDataInputMsgType;
import org.apromore.data_access.model_manager.EditProcessDataOutputMsgType;
import org.apromore.data_access.model_manager.EditSessionType;
import org.apromore.data_access.model_manager.NativeTypesType;
import org.apromore.data_access.model_manager.ProcessSummariesType;
import org.apromore.data_access.model_manager.ProcessVersionIdentifierType;
import org.apromore.data_access.model_manager.ReadAllUsersOutputMsgType;
import org.apromore.data_access.model_manager.ReadCanonicalAnfInputMsgType;
import org.apromore.data_access.model_manager.ReadCanonicalAnfOutputMsgType;
import org.apromore.data_access.model_manager.ReadDomainsInputMsgType;
import org.apromore.data_access.model_manager.ReadDomainsOutputMsgType;
import org.apromore.data_access.model_manager.ReadEditSessionInputMsgType;
import org.apromore.data_access.model_manager.ReadEditSessionOutputMsgType;
import org.apromore.data_access.model_manager.ReadFormatOutputMsgType;
import org.apromore.data_access.model_manager.ReadNativeTypesInputMsgType;
import org.apromore.data_access.model_manager.ReadNativeTypesOutputMsgType;
import org.apromore.data_access.model_manager.ReadProcessSummariesInputMsgType;
import org.apromore.data_access.model_manager.ReadProcessSummariesOutputMsgType;
import org.apromore.data_access.model_manager.ReadUserInputMsgType;
import org.apromore.data_access.model_manager.ReadUserOutputMsgType;
import org.apromore.data_access.model_manager.ResultType;
import org.apromore.data_access.model_manager.UserType;
import org.apromore.data_access.model_manager.UsernamesType;
import org.apromore.data_access.model_manager.WriteEditSessionInputMsgType;
import org.apromore.data_access.model_manager.WriteEditSessionOutputMsgType;
import org.apromore.data_access.model_manager.WriteUserInputMsgType;
import org.apromore.data_access.model_manager.WriteUserOutputMsgType;

/**
 * This class was generated by Apache CXF 2.2.9
 * Wed Dec 08 16:50:04 PST 2010
 * Generated source version: 2.2.9
 * 
 */

@javax.jws.WebService(
                      serviceName = "DAManagerService",
                      portName = "DAManager",
                      targetNamespace = "http://www.apromore.org/data_access/service_manager",
                      wsdlLocation = "http://localhost:8080/Apromore-dataAccess/services/DAManager?wsdl",
                      endpointInterface = "org.apromore.data_access.service_manager.DAManagerPortType")


		public class DAManagerPortTypeImpl implements DAManagerPortType {
	private static final Logger LOG = Logger.getLogger(DAManagerPortTypeImpl.class.getName());



	public org.apromore.data_access.model_manager.ReadAllUsersOutputMsgType 
	readAllUsers(org.apromore.data_access.model_manager.ReadAllUsersInputMsgType payload) { 
        LOG.info("Executing operation readAllUsers");
        System.out.println(payload);
        ReadAllUsersOutputMsgType res = new ReadAllUsersOutputMsgType();
		ResultType result = new ResultType();
		res.setResult(result);
		UsernamesType allUsers;
        try {
        	allUsers = UserDao.getInstance().getAllUsers();
        	res.setUsernames(allUsers);
			result.setCode(0);
			result.setMessage("");
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
    }

	public org.apromore.data_access.model_manager.ReadFormatOutputMsgType 
	readFormat (org.apromore.data_access.model_manager.ReadFormatInputMsgType payload) { 
		LOG.info("Executing operation readNative");
		System.out.println(payload);
		ReadFormatOutputMsgType res = new ReadFormatOutputMsgType();
		ResultType result = new ResultType();
		res.setResult(result);
		try {
			Integer processId = payload.getProcessId();
			String version = payload.getVersion();
			String read = null;
			String format = payload.getFormat();
			
			if (Constants.CANONICAL.compareTo(format)==0) {
				read = ProcessDao.getInstance().getCanonical (processId, version);
			} else if (format.startsWith(Constants.ANNOTATIONS)) {
				// format starts with Constants.ANNOTATIONS + " - "
				format = format.substring(Constants.ANNOTATIONS.length()+3, format.length());
				read = ProcessDao.getInstance().getAnnotation (processId, version, format);
			} else {
				read = ProcessDao.getInstance().getNative(processId, version, format);
			}
			DataSource source = new ByteArrayDataSource(read, "text/xml"); 
			res.setNative(new DataHandler(source));
			result.setCode(0);
			result.setMessage("");
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
    }

	public EditProcessDataOutputMsgType editProcessData(EditProcessDataInputMsgType payload) { 
		LOG.info("Executing operation EditDataProcesses");
		System.out.println(payload);
		EditProcessDataOutputMsgType res = new EditProcessDataOutputMsgType ();
		ResultType result = new ResultType();
		res.setResult(result);
		try {
			Integer processId = payload.getId();
			String processName = payload.getProcessName();
			String domain = payload.getDomain();
			String username = payload.getOwner();
			String preVersion = payload.getPreName();
			String newVersion = payload.getNewName();
			String ranking = payload.getRanking();
			ProcessDao.getInstance().editDataProcesses(processId, processName, domain, username,
					preVersion, newVersion, ranking);
			result.setCode(0);
			result.setMessage("");
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
	}

	public DeleteProcessVersionsOutputMsgType deleteProcessVersions(DeleteProcessVersionsInputMsgType payload) { 
		LOG.info("Executing operation deleteProcessVersions");
		System.out.println(payload);
		DeleteProcessVersionsOutputMsgType res = new DeleteProcessVersionsOutputMsgType();
		ResultType result = new ResultType();
		res.setResult(result);
		try {
			HashMap<Integer,List<String>> processVersions = new HashMap<Integer,List<String>>() ;
			List<ProcessVersionIdentifierType> processes = payload.getProcessVersionIdentifier();
			Iterator<ProcessVersionIdentifierType> it = processes.iterator();
			while (it.hasNext()) {
				ProcessVersionIdentifierType process = it.next();
				Iterator<String> itV = process.getVersionName().iterator();
				processVersions.put(process.getProcessid(), process.getVersionName());
			}
			ProcessDao.getInstance().deleteProcessVersions(processVersions);
			result.setCode(0);
			result.setMessage("");
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
	}


	public DeleteEditSessionOutputMsgType deleteEditSession(DeleteEditSessionInputMsgType payload) { 
		LOG.info("Executing operation deleteEditSession");
		System.out.println(payload);
		DeleteEditSessionOutputMsgType res = new DeleteEditSessionOutputMsgType();
		ResultType result = new ResultType();
		res.setResult(result);
		try {
			int code = payload.getEditSessionCode();
			EditSessionDao.getInstance().deleteEditSession(code);
			result.setCode(0);
			result.setMessage("");
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
	}

	public ReadEditSessionOutputMsgType readEditSession(ReadEditSessionInputMsgType payload) { 
		LOG.info("Executing operation readEditSession");
		System.out.println(payload);
		ReadEditSessionOutputMsgType res = new ReadEditSessionOutputMsgType();
		ResultType result = new ResultType();
		res.setResult(result);
		try {
			int code = payload.getEditSessionCode();
			EditSessionType editSession = EditSessionDao.getInstance().getEditSession(code);
			res.setEditSession(editSession);
			result.setCode(0);
			result.setMessage("");
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
	}


	public WriteEditSessionOutputMsgType writeEditSession(WriteEditSessionInputMsgType payload) { 
		LOG.info("Executing operation writeEditSession");
		System.out.println(payload);
		WriteEditSessionOutputMsgType res = new WriteEditSessionOutputMsgType();
		ResultType result = new ResultType();
		res.setResult(result);
		try {
			EditSessionType editSession = payload.getEditSession();
			int code = EditSessionDao.getInstance().writeEditSession(editSession);
			res.setEditSessionCode(code);
			result.setCode(0);
			result.setMessage("");
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
	}

	public ReadCanonicalAnfOutputMsgType readCanonicalAnf(ReadCanonicalAnfInputMsgType payload) { 
		LOG.info("Executing operation readCanonicalAnf");
		System.out.println(payload);
		ReadCanonicalAnfOutputMsgType res = new  ReadCanonicalAnfOutputMsgType();
		ResultType result = new ResultType();
		res.setResult(result);
		try {
			String canonical = ProcessDao.getInstance().getCanonical(payload.getProcessId(), 
					payload.getVersion());
			DataSource sourceCpf = new ByteArrayDataSource(canonical, "text/xml"); 
			res.setCpf(new DataHandler(sourceCpf));
			Boolean withAnnotation = payload.isWithAnnotation();
			String anf = null;
			if (withAnnotation) {
				anf = ProcessDao.getInstance().getAnnotation(payload.getProcessId(), 
						payload.getVersion(), payload.getAnnotationName());
				DataSource sourceAnf = new ByteArrayDataSource(anf, "text/xml");
				res.setAnf(new DataHandler(sourceAnf));
			}
			result.setCode(0);
			result.setMessage("");
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
	}

	public ReadNativeTypesOutputMsgType readNativeTypes(ReadNativeTypesInputMsgType payload) { 
		LOG.info("(DA)Executing operation readFormats");
		System.out.println(payload);
		ReadNativeTypesOutputMsgType res = new ReadNativeTypesOutputMsgType();
		ResultType result = new ResultType();
		NativeTypesType formats ;
		res.setResult(result);
		try {
			formats = ((FormatDao) FormatDao.getInstance()).getFormats();
			res.setNativeTypes(formats);
			result.setCode(0);
			result.setMessage("");
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
	}

	/* (non-Javadoc)
	 * @see org.apromore.dataaccess.service_manager.DAManagerPortType#writeUser(org.apromore.dataaccess.model_manager.WriteUserInputMsgType  payload )*
	 */
	public WriteUserOutputMsgType writeUser(WriteUserInputMsgType payload) { 
		LOG.info("Executing operation writeUser");
		System.out.println(payload);

		WriteUserOutputMsgType res = new WriteUserOutputMsgType();
		ResultType result = new ResultType();
		res.setResult(result);
		UserType user = payload.getUser();
		try {			
			UserDao.getInstance().writeUser(user);
			result.setCode(0);
			result.setMessage("");
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
	}

	/* (non-Javadoc)
	 * @see org.apromore.dataaccess.service_manager.DAManagerPortType#readProcessSummaries(org.apromore.dataaccess.model_manager.ReadProcessSummariesInputMsgType  payload )*
	 */
	public ReadProcessSummariesOutputMsgType readProcessSummaries(ReadProcessSummariesInputMsgType payload) { 
		LOG.info("Executing operation readProcessSummaries");
		System.out.println(payload);
		ReadProcessSummariesOutputMsgType res = new ReadProcessSummariesOutputMsgType();
		ResultType result = new ResultType();
		ProcessSummariesType processSummaries ;
		res.setResult(result);
		String searchExp = payload.getSearchExpression();

		try {
			processSummaries = ((ProcessDao) ProcessDao.getInstance()).getProcessSummaries(searchExp);
			res.setProcessSummaries(processSummaries);
			result.setCode(0);
			result.setMessage("");
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
	}

	/* (non-Javadoc)
	 * @see org.apromore.dataaccess.service_manager.DAManagerPortType#readDomains(org.apromore.dataaccess.model_manager.ReadDomainsInputMsgType  payload )*
	 */
	public ReadDomainsOutputMsgType readDomains(ReadDomainsInputMsgType payload) { 
		LOG.info("Executing operation readDomains");
		System.out.println(payload);

		ReadDomainsOutputMsgType res = new ReadDomainsOutputMsgType();
		ResultType result = new ResultType();
		DomainsType domains ;
		res.setResult(result);
		try {
			domains = ((DomainDao) DomainDao.getInstance()).getDomains();
			res.setDomains(domains);
			result.setCode(0);
			result.setMessage("");
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
	}

	/* (non-Javadoc)
	 * @see org.apromore.dataaccess.service_manager.DAManagerPortType#readUser(org.apromore.dataaccess.model_manager.ReadUserInputMsgType  payload )*
	 */
	public ReadUserOutputMsgType readUser(ReadUserInputMsgType payload) { 
		LOG.info("Executing operation readUser");
		System.out.println(payload);

		String username = payload.getUsername();
		ReadUserOutputMsgType res = new ReadUserOutputMsgType();
		ResultType result = new ResultType();
		UserType user ;
		res.setResult(result);

		try {
			user = ((UserDao) UserDao.getInstance()).readUser(username);
			res.setUser(user);
			result.setCode(0);
			result.setMessage("");
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
	}

}
