
package org.test_toolbox.manager;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;

import org.test_toolbox.manager.model_manager.ParameterType;
import org.test_toolbox.manager.model_manager.ParametersType;
import org.test_toolbox.manager.model_manager.ProcessSummariesType;
import org.test_toolbox.manager.model_manager.ProcessSummaryType;
import org.test_toolbox.manager.model_manager.ReadProcessSummariesInputMsgType;
import org.test_toolbox.manager.model_manager.ReadProcessSummariesOutputMsgType;
import org.test_toolbox.manager.model_manager.ResultType;
import org.test_toolbox.manager.model_manager.SearchForSimilarProcessesInputMsgType;
import org.test_toolbox.manager.model_manager.SearchForSimilarProcessesOutputMsgType;
import org.test_toolbox.manager.model_manager.VersionSummaryType;

/**
 * This class was generated by Apache CXF 2.4.1
 * 2011-07-21T09:03:57.235+10:00
 * Generated source version: 2.4.1
 * 
 */
public final class Client {

	private static final QName SERVICE_NAME = new QName("http://www.apromore.org/manager/service_portal", "ManagerPortalService");
	private static ManagerPortalService ss ;
	private static ManagerPortalPortType port ;

	private Client() {
	}

	private static ProcessSummariesType readProcessSummaries() throws Exception {
		ReadProcessSummariesInputMsgType payload = new ReadProcessSummariesInputMsgType();
		payload.setSearchExpression("");
		ReadProcessSummariesOutputMsgType res = port.readProcessSummaries(payload);
		ResultType result = res.getResult();
		if (result.getCode() == -1) {
			throw new Exception (result.getMessage()); 
		} else {
			return res.getProcessSummaries();
		}
	}
	private static ProcessSummariesType searchForSimilarProcesses(
			int processId, String versionName, 
			String method, 
			Boolean latestVersions,
			double modelthreshold, 
			double labelthreshold, 
			double contextthreshold, 
			double skipnweight, 
			double subnweight, 
			double skipeweight) throws Exception {

		SearchForSimilarProcessesInputMsgType payload = new SearchForSimilarProcessesInputMsgType();
		payload.setAlgorithm(method);
		payload.setProcessId(processId);
		payload.setVersionName(versionName);
		payload.setLatestVersions(latestVersions);
		ParametersType params = new ParametersType();
		// modelthreshold
		ParameterType p = new ParameterType();
		p.setName("modelthreshold");
		p.setValue(modelthreshold);
		params.getParameter().add(p);

		// labelthreshold
		p = new ParameterType();
		p.setName("labelthreshold");
		p.setValue(labelthreshold);
		params.getParameter().add(p);

		// contextthreshold
		p = new ParameterType();
		p.setName("contextthreshold");
		p.setValue(contextthreshold);
		params.getParameter().add(p);

		if ("Greedy".equals(method)) {
			// skipnweight
			p = new ParameterType();
			p.setName("skipnweight");
			p.setValue(skipnweight);
			params.getParameter().add(p);

			// subnweight
			p = new ParameterType();
			p.setName("subnweight");
			p.setValue(subnweight);
			params.getParameter().add(p);

			// skipeweight
			p = new ParameterType();
			p.setName("skipeweight");
			p.setValue(skipeweight);
			params.getParameter().add(p);
		}
		payload.setParameters(params);

		SearchForSimilarProcessesOutputMsgType res = port.searchForSimilarProcesses(payload);

		ResultType result = res.getResult();
		if (result.getCode() == -1) {
			throw new Exception (result.getMessage()); 
		} else {
			return res.getProcessSummaries();
		}
	}

	public static void main(String args[]) throws java.lang.Exception {
		
		
		URL wsdlURL = null;
		if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
			String host = args[0];
			wsdlURL = new URL("http://" + host + "/Apromore-manager/services/ManagerPortal?wsdl");
		} else {
			throw new Exception("argument must be host:port");
		}

		ss = new ManagerPortalService(wsdlURL, SERVICE_NAME);
		port = ss.getManagerPortal();  

		{
			System.out.println("Invoking searchForSimilarProcesses...on whole database...");
			ProcessSummariesType queries = readProcessSummaries();
			int processId ;
			String versionName ;
			String method = "Greedy";
			Boolean latestVersions = true;
			double modelthreshold = 0.5;
			double labelthreshold = 0.5;
			double contextthreshold = 0.75;
			double skipnweight = 1;
			double subnweight = 1; 
			double skipeweight = 1;
			int errors = 0, processVersions = 0 ;
			for (int q=0;q<queries.getProcessSummary().size();q++) {
				ProcessSummaryType pQuery = queries.getProcessSummary().get(q);
				processId = pQuery.getId();
				for (int vq=0;vq<pQuery.getVersionSummaries().size();vq++){
					processVersions++;
					versionName = pQuery.getVersionSummaries().get(vq).getName();
					System.out.println("searchForSimilarProcesses.result for processId " + processId + " version "
							+ versionName + " is ");
					try {
						ProcessSummariesType res = searchForSimilarProcesses(
								processId,versionName,method,latestVersions,
								modelthreshold,labelthreshold,contextthreshold,skipnweight,subnweight,skipeweight);
						for (int i=0; i<res.getProcessSummary().size();i++) {
							ProcessSummaryType process = res.getProcessSummary().get(i);
							System.out.println ("       Process: " + process.getName());
							for (int j=0;j<process.getVersionSummaries().size();j++) {
								VersionSummaryType version = process.getVersionSummaries().get(j);
								System.out.println ("---------------- version: " + version.getName() 
										+ " with score " + version.getScore());
							}
						}
					} catch (Exception e) {
						System.out.println ("Error: " + e.getMessage());
						errors++;
						if (errors > 10) {
							System.out.println ("Too many errors give up!");
							System.exit(0);
						}
					}
				}
			}
			System.out.println ("Summary: " + processVersions + " analysed. " + errors + " generated errors.");
		}

		System.exit(0);
	}

}
