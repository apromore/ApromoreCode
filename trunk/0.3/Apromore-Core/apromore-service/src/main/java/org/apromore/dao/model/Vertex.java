package org.apromore.dao.model;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.springframework.beans.factory.annotation.Configurable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

/**
 * Vertex generated by hbm2java
 */
@Entity
@Table(name = "vertex")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Configurable("vertex")
public class Vertex implements Serializable {

    /**
     * Hard coded for interoperability.
     */
    private static final long serialVersionUID = -5232538404638485548L;

    private String vid;
    private Content content;
    private String vname;
    private String vtype;
    private String locatorPreset;
    private String locatorPostset;
    private Set<Edge> edgesForSourceVid = new HashSet<Edge>(0);
    private Set<Edge> edgesForTargetVid = new HashSet<Edge>(0);


    public Vertex() { }


    @Id
    @Column(name = "vid", unique = true, nullable = false, length = 40)
    public String getVid() {
        return this.vid;
    }

    public void setVid(final String newVid) {
        this.vid = newVid;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "content_id")
    public Content getContent() {
        return this.content;
    }

    public void setContent(final Content newContent) {
        this.content = newContent;
    }


    @Column(name = "vname", length = 2000)
    public String getVname() {
        return this.vname;
    }

    public void setVname(final String newVname) {
        this.vname = newVname;
    }


    @Column(name = "vtype", length = 100)
    public String getVtype() {
        return this.vtype;
    }

    public void setVtype(final String newVtype) {
        this.vtype = newVtype;
    }


    @Column(name = "locator_preset", length = 2000)
    public String getLocatorPreset() {
        return this.locatorPreset;
    }

    public void setLocatorPreset(final String newLocatorPreset) {
        this.locatorPreset = newLocatorPreset;
    }


    @Column(name = "locator_postset", length = 2000)
    public String getLocatorPostset() {
        return this.locatorPostset;
    }

    public void setLocatorPostset(final String newLocatorPostset) {
        this.locatorPostset = newLocatorPostset;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "verticesBySourceVid")
    public Set<Edge> getEdgesForSourceVid() {
        return this.edgesForSourceVid;
    }

    public void setEdgesForSourceVid(final Set<Edge> newEdgesForSourceVid) {
        this.edgesForSourceVid = newEdgesForSourceVid;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "verticesByTargetVid")
    public Set<Edge> getEdgesForTargetVid() {
        return this.edgesForTargetVid;
    }

    public void setEdgesForTargetVid(final Set<Edge> newEdgesForTargetVid) {
        this.edgesForTargetVid = newEdgesForTargetVid;
    }

}


