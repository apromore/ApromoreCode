package org.apromore.dao.model;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.springframework.beans.factory.annotation.Configurable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

/**
 * FragmentVersion generated by hbm2java
 */
@Entity
@Table(name = "fragment_version")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Configurable("fragmentVersion")
public class FragmentVersion implements Serializable {

    /**
     * Hard coded for interoperability.
     */
    private static final long serialVersionUID = -9072887404638485548L;

    private String fragmentVersionId;
    private String childMappingCode;
    private Integer lockStatus;
    private Integer lockCount;
    private String derivedFromFragment;
    private Integer fragmentSize;
    private String fragmentType;
    private String clusterId;
    private String newestNeighbor;

    private Fragment fragment;
    private Content content;
    private Set<ProcessFragmentMap> processFragmentMaps = new HashSet<ProcessFragmentMap>(0);
    private Set<FragmentVersionDag> fragmentVersionDags = new HashSet<FragmentVersionDag>(0);
    private Set<FragmentVersionDag> fragmentVersionDags_1 = new HashSet<FragmentVersionDag>(0);


    public FragmentVersion() { }


    @Id
    @Column(name = "fragment_version_id", unique = true, nullable = false, length = 40)
    public String getFragmentVersionId() {
        return this.fragmentVersionId;
    }

    public void setFragmentVersionId(final String fragmentVersionId) {
        this.fragmentVersionId = fragmentVersionId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "fragment_id")
    public Fragment getFragment() {
        return this.fragment;
    }

    public void setFragment(final Fragment newFragment) {
        this.fragment = newFragment;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "content_id")
    public Content getContent() {
        return this.content;
    }

    public void setContent(final Content newContent) {
        this.content = newContent;
    }


    @Column(name = "child_mapping_code", length = 20000)
    public String getChildMappingCode() {
        return this.childMappingCode;
    }

    public void setChildMappingCode(final String newChildMappingCode) {
        this.childMappingCode = newChildMappingCode;
    }


    @Column(name = "lock_status")
    public Integer getLockStatus() {
        return this.lockStatus;
    }

    public void setLockStatus(final Integer newLockStatus) {
        this.lockStatus = newLockStatus;
    }


    @Column(name = "lock_count")
    public Integer getLockCount() {
        return this.lockCount;
    }

    public void setLockCount(final Integer newLockCount) {
        this.lockCount = newLockCount;
    }


    @Column(name = "derived_from_fragment", length = 40)
    public String getDerivedFromFragment() {
        return this.derivedFromFragment;
    }

    public void setDerivedFromFragment(final String newDerivedFromFragment) {
        this.derivedFromFragment = newDerivedFromFragment;
    }


    @Column(name = "fragment_size")
    public Integer getFragmentSize() {
        return this.fragmentSize;
    }

    public void setFragmentSize(final Integer newFragmentSize) {
        this.fragmentSize = newFragmentSize;
    }


    @Column(name = "fragment_type", length = 10)
    public String getFragmentType() {
        return this.fragmentType;
    }

    public void setFragmentType(final String newFragmentType) {
        this.fragmentType = newFragmentType;
    }


    @Column(name = "cluster_id", length = 40)
    public String getClusterId() {
        return this.clusterId;
    }

    public void setClusterId(final String newClusterId) {
        this.clusterId = newClusterId;
    }


    @Column(name = "newest_neighbor", length = 40)
    public String getNewestNeighbor() {
        return this.newestNeighbor;
    }

    public void setNewestNeighbor(final String newNewestNeighbor) {
        this.newestNeighbor = newNewestNeighbor;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "fragmentVersion")
    public Set<ProcessFragmentMap> getProcessFragmentMaps() {
        return this.processFragmentMaps;
    }

    public void setProcessFragmentMaps(final Set<ProcessFragmentMap> newProcessFragmentMaps) {
        this.processFragmentMaps = newProcessFragmentMaps;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "fragmentVersion")
    public Set<FragmentVersionDag> getFragmentVersionDags() {
        return this.fragmentVersionDags;
    }

    public void setFragmentVersionDags(final Set<FragmentVersionDag> newFragmentVersionDags) {
        this.fragmentVersionDags = newFragmentVersionDags;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "fragmentVersion")
    public Set<FragmentVersionDag> getFragmentVersionDags_1() {
        return this.fragmentVersionDags_1;
    }

    public void setFragmentVersionDags_1(final Set<FragmentVersionDag> newFragmentVersionDags_1) {
        this.fragmentVersionDags_1 = newFragmentVersionDags_1;
    }

}


