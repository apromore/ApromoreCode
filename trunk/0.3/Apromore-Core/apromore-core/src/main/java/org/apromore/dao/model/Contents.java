package org.apromore.dao.model;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.springframework.beans.factory.annotation.Configurable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

/**
 * Contents generated by hbm2java
 */
@Entity
@Table(name = "contents")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Configurable("contents")
public class Contents implements Serializable {

    /**
     * Hard coded for interoperability.
     */
    private static final long serialVersionUID = -9078623404638485548L;

    private String contentId;
    private String boundaryS;
    private String boundaryE;
    private String contentHash;
    private Set<FragmentVersions> fragmentVersionses = new HashSet<FragmentVersions>(0);
    private Set<Vertices> verticeses = new HashSet<Vertices>(0);
    private Set<Edges> edgeses = new HashSet<Edges>(0);


    public Contents() { }



    @Id
    @Column(name = "content_id", unique = true, nullable = false, length = 40)
    public String getContentId() {
        return this.contentId;
    }

    public void setContentId(String contentId) {
        this.contentId = contentId;
    }


    @Column(name = "boundary_s", length = 40)
    public String getBoundaryS() {
        return this.boundaryS;
    }

    public void setBoundaryS(String boundaryS) {
        this.boundaryS = boundaryS;
    }


    @Column(name = "boundary_e", length = 40)
    public String getBoundaryE() {
        return this.boundaryE;
    }

    public void setBoundaryE(String boundaryE) {
        this.boundaryE = boundaryE;
    }


    @Column(name = "content_hash", length = 65535)
    public String getContentHash() {
        return this.contentHash;
    }

    public void setContentHash(String contentHash) {
        this.contentHash = contentHash;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "contents")
    public Set<FragmentVersions> getFragmentVersionses() {
        return this.fragmentVersionses;
    }

    public void setFragmentVersionses(Set<FragmentVersions> fragmentVersionses) {
        this.fragmentVersionses = fragmentVersionses;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "contents")
    public Set<Vertices> getVerticeses() {
        return this.verticeses;
    }

    public void setVerticeses(Set<Vertices> verticeses) {
        this.verticeses = verticeses;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "contents")
    public Set<Edges> getEdgeses() {
        return this.edgeses;
    }

    public void setEdgeses(Set<Edges> edgeses) {
        this.edgeses = edgeses;
    }

}


