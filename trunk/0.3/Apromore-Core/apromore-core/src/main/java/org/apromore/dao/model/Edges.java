package org.apromore.dao.model;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.springframework.beans.factory.annotation.Configurable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import java.io.Serializable;

/**
 * Edges generated by hbm2java
 */
@Entity
@Table(name = "edges")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Configurable("edges")
public class Edges implements Serializable {

    /**
     * Hard coded for interoperability.
     */
    private static final long serialVersionUID = -9072531214638485548L;

    private Integer edgeId;
    private Vertices verticesBySourceVid;
    private Contents contents;
    private Vertices verticesByTargetVid;


    public Edges() { }


    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "edge_id", unique = true, nullable = false)
    public Integer getEdgeId() {
        return this.edgeId;
    }

    public void setEdgeId(Integer edgeId) {
        this.edgeId = edgeId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "source_vid")
    public Vertices getVerticesBySourceVid() {
        return this.verticesBySourceVid;
    }

    public void setVerticesBySourceVid(Vertices verticesBySourceVid) {
        this.verticesBySourceVid = verticesBySourceVid;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "content_id")
    public Contents getContents() {
        return this.contents;
    }

    public void setContents(Contents contents) {
        this.contents = contents;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "target_vid")
    public Vertices getVerticesByTargetVid() {
        return this.verticesByTargetVid;
    }

    public void setVerticesByTargetVid(Vertices verticesByTargetVid) {
        this.verticesByTargetVid = verticesByTargetVid;
    }

}


