package org.apromore.dao.model;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.springframework.beans.factory.annotation.Configurable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

/**
 * ProcessBranches generated by hbm2java
 */
@Entity
@Table(name = "process_branches")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Configurable("process_branches")
public class ProcessBranches implements Serializable {

    /**
     * Hard coded for interoperability.
     */
    private static final long serialVersionUID = -9072538404478485548L;

    private String branchId;
    private Processes processes;
    private String branchName;
    private ProcessModelVersions processModelVersionsByCurrentProcessModelVersionId;
    private ProcessModelVersions processModelVersionsBySourceProcessModelVersionId;
    private Set<ProcessModelVersions> processModelVersionses = new HashSet<ProcessModelVersions>(0);


    public ProcessBranches() { }


    @Id
    @Column(name = "branch_id", unique = true, nullable = false, length = 40)
    public String getBranchId() {
        return this.branchId;
    }

    public void setBranchId(String branchId) {
        this.branchId = branchId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "current_process_model_version_id")
    public ProcessModelVersions getProcessModelVersionsByCurrentProcessModelVersionId() {
        return this.processModelVersionsByCurrentProcessModelVersionId;
    }

    public void setProcessModelVersionsByCurrentProcessModelVersionId(ProcessModelVersions processModelVersionsByCurrentProcessModelVersionId) {
        this.processModelVersionsByCurrentProcessModelVersionId = processModelVersionsByCurrentProcessModelVersionId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "source_process_model_version_id")
    public ProcessModelVersions getProcessModelVersionsBySourceProcessModelVersionId() {
        return this.processModelVersionsBySourceProcessModelVersionId;
    }

    public void setProcessModelVersionsBySourceProcessModelVersionId(ProcessModelVersions processModelVersionsBySourceProcessModelVersionId) {
        this.processModelVersionsBySourceProcessModelVersionId = processModelVersionsBySourceProcessModelVersionId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "process_id")
    public Processes getProcesses() {
        return this.processes;
    }

    public void setProcesses(Processes processes) {
        this.processes = processes;
    }


    @Column(name = "branch_name", length = 1000)
    public String getBranchName() {
        return this.branchName;
    }

    public void setBranchName(String branchName) {
        this.branchName = branchName;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "processBranches")
    public Set<ProcessModelVersions> getProcessModelVersionses() {
        return this.processModelVersionses;
    }

    public void setProcessModelVersionses(Set<ProcessModelVersions> processModelVersionses) {
        this.processModelVersionses = processModelVersionses;
    }

}


