
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.apromore.canoniser.service_manager;

import java.io.InputStream;
import java.util.logging.Logger;

import javax.activation.DataHandler;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;

import org.apromore.canoniser.common.Constants;
import org.apromore.canoniser.da.RequestToDA;
import org.apromore.canoniser.model_da.ProcessSummaryType;
import org.apromore.canoniser.model_manager.CanoniseProcessInputMsgType;
import org.apromore.canoniser.model_manager.CanoniseProcessOutputMsgType;
import org.apromore.canoniser.model_manager.ResultType;
import org.apromore.canoniser.model_manager.VersionSummaryType;
import org.wfmc._2008.xpdl2.PackageType;

import pkg.XPDL2Canonical;

/**
 * This class was generated by Apache CXF 2.2.7
 * Fri Apr 23 11:54:47 EST 2010
 * Generated source version: 2.2.7
 * 
 */

@javax.jws.WebService(
                      serviceName = "CanoniserManagerService",
                      portName = "CanoniserManager",
                      targetNamespace = "http://www.apromore.org/canoniser/service_manager",
                      wsdlLocation = "http://localhost:8080/Apromore-canoniser/services/CanoniserManager?wsdl",
                      endpointInterface = "org.apromore.canoniser.service_manager.CanoniserManagerPortType")

		public class CanoniserManagerPortTypeImpl implements CanoniserManagerPortType {

	private static final Logger LOG = Logger.getLogger(CanoniserManagerPortTypeImpl.class.getName());

	/* (non-Javadoc)
	 * @see org.apromore.canoniser.service_manager.CanoniserManagerPortType#canoniseProcess(org.apromore.canoniser.model_manager.CanoniseProcessInputMsgType  payload )*
	 */
	public CanoniseProcessOutputMsgType canoniseProcess(CanoniseProcessInputMsgType payload) { 
		LOG.info("Executing operation canoniseProcess");
		System.out.println(payload);
		CanoniseProcessOutputMsgType res = new CanoniseProcessOutputMsgType();
		ResultType result = new ResultType();
		res.setResult(result);

		try {
			DataHandler handler = payload.getProcessDescription();
			InputStream process_xml = handler.getInputStream();
			String username = payload.getUsername();
			String nativeType = payload.getNativeType();
			String processName = payload.getProcessName();

			JAXBContext jc1 = JAXBContext.newInstance(Constants.JAXB_CONTEXT_XPDL);
			Unmarshaller u = jc1.createUnmarshaller();
			JAXBElement<PackageType> rootElement = (JAXBElement<PackageType>) u.unmarshal(process_xml);
			PackageType pkg = rootElement.getValue();

			XPDL2Canonical xpdl2canonical = new XPDL2Canonical(pkg);

			RequestToDA request = new RequestToDA();
			org.apromore.canoniser.model_da.ProcessSummaryType processSummary =
				request.StoreProcess (username, processName, nativeType, process_xml, xpdl2canonical.getCpf(), xpdl2canonical.getAnf());
			org.apromore.canoniser.model_manager.ProcessSummaryType processSummaryManager = 
				new org.apromore.canoniser.model_manager.ProcessSummaryType();
			processSummaryManager.setDomain(processSummary.getDomain());
			processSummaryManager.setId(processSummary.getId());
			processSummaryManager.setLastVersion(processSummary.getLastVersion());
			processSummaryManager.setName(processSummary.getName());
			processSummaryManager.setOriginalNativeType(processSummary.getOriginalNativeType());
			processSummaryManager.setRanking(processSummary.getRanking());
			for (int i=0;i<processSummary.getVersionSummaries().size();i++) {
				org.apromore.canoniser.model_da.VersionSummaryType versionDA = processSummary.getVersionSummaries().get(i);
				org.apromore.canoniser.model_manager.VersionSummaryType versionManager = new VersionSummaryType();
				processSummaryManager.getVersionSummaries().add(versionManager);
				versionManager.setCreationDate(versionDA.getCreationDate());
				versionManager.setLastUpdate(versionDA.getLastUpdate());
				versionManager.setName(versionDA.getName());
				versionManager.setRanking(versionDA.getRanking());
			}
			res.setProcessSummary(processSummaryManager);
			result.setCode(0);
			result.setMessage("");

		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
	}

}
