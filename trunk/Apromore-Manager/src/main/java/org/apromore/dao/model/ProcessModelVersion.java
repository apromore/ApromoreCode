package org.apromore.dao.model;

import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.data.jpa.domain.AbstractPersistable;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * ProcessModelVersion generated by hbm2java
 */
@Entity
@Table(name = "process_model_version")
@Configurable("processModelVersion")
public class ProcessModelVersion implements Serializable {

    private Integer id;
    private Double versionNumber;
    private String versionName;
    private Integer changePropagation;
    private Integer lockStatus;
    private Integer numVertices;
    private Integer numEdges;

    private ProcessBranch processBranch;
    private FragmentVersion rootFragmentVersion;

    private Set<FragmentVersion> fragmentVersions = new HashSet<FragmentVersion>(0);

    private Set<Annotation> annotations = new HashSet<Annotation>(0);
    private Set<Native> natives = new HashSet<Native>(0);
    private Set<EditSession> editSessions = new HashSet<EditSession>(0);
    private Set<Node> parentProcesses = new HashSet<Node>(0);
    private Set<ProcessBranch> currentProcessModelVersion = new HashSet<ProcessBranch>(0);
    private Set<ProcessBranch> sourceProcessModelVersion = new HashSet<ProcessBranch>(0);
    private Set<ProcessModelAttribute> processModelAttributes = new HashSet<ProcessModelAttribute>(0);
    private Set<Object> objects = new HashSet<Object>(0);
    private Set<Resource> resources = new HashSet<Resource>(0);


    /**
     * Default Constructor.
     */
    public ProcessModelVersion() {
    }



    /**
     * returns the Id of this Object.
     * @return the id
     */
    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    /**
     * Sets the Id of this Object
     * @param id the new Id.
     */
    public void setId(final Integer id) {
        this.id = id;
    }



    @Column(name = "version_number")
    public Double getVersionNumber() {
        return this.versionNumber;
    }

    public void setVersionNumber(final Double newVersionNumber) {
        this.versionNumber = newVersionNumber;
    }


    @Column(name = "version_name", length = 200)
    public String getVersionName() {
        return this.versionName;
    }

    public void setVersionName(final String newVersionName) {
        this.versionName = newVersionName;
    }


    @Column(name = "change_propagation")
    public Integer getChangePropagation() {
        return this.changePropagation;
    }

    public void setChangePropagation(final Integer newChangePropagation) {
        this.changePropagation = newChangePropagation;
    }


    @Column(name = "lock_status")
    public Integer getLockStatus() {
        return this.lockStatus;
    }

    public void setLockStatus(final Integer newLockStatus) {
        this.lockStatus = newLockStatus;
    }


    @Column(name = "num_nodes")
    public Integer getNumVertices() {
        return this.numVertices;
    }

    public void setNumVertices(final Integer newNumVertices) {
        this.numVertices = newNumVertices;
    }


    @Column(name = "num_edges")
    public Integer getNumEdges() {
        return this.numEdges;
    }

    public void setNumEdges(final Integer newNumEdges) {
        this.numEdges = newNumEdges;
    }


    @ManyToOne
    @JoinColumn(name = "branchId")
    public ProcessBranch getProcessBranch() {
        return this.processBranch;
    }

    public void setProcessBranch(final ProcessBranch newProcessBranches) {
        this.processBranch = newProcessBranches;
    }


    @ManyToOne
    @JoinColumn(name = "rootFragmentVersionId")
    public FragmentVersion getRootFragmentVersion() {
        return this.rootFragmentVersion;
    }

    public void setRootFragmentVersion(final FragmentVersion newRootFragmentVersion) {
        this.rootFragmentVersion = newRootFragmentVersion;
    }


    @ManyToMany
    @JoinTable(name = "process_fragment_map", joinColumns = {@JoinColumn(name = "processModelVersionId", nullable = false,
            updatable = false)}, inverseJoinColumns = {@JoinColumn(name = "fragmentVersionId", nullable = false, updatable = false)})
    public Set<FragmentVersion> getFragmentVersions() {
        return this.fragmentVersions;
    }

    public void setFragmentVersions(Set<FragmentVersion> fragmentVersions) {
        this.fragmentVersions = fragmentVersions;
    }


    @OneToMany(mappedBy = "processModelVersion")
    public Set<Annotation> getAnnotations() {
        return this.annotations;
    }

    public void setAnnotations(final Set<Annotation> newAnnotations) {
        this.annotations = newAnnotations;
    }

    @OneToMany(mappedBy = "processModelVersion")
    public Set<Native> getNatives() {
        return this.natives;
    }

    public void setNatives(final Set<Native> newNatives) {
        this.natives = newNatives;
    }

    @OneToMany(mappedBy = "processModelVersion")
    public Set<EditSession> getEditSessions() {
        return this.editSessions;
    }

    public void setEditSessions(final Set<EditSession> editSessions) {
        this.editSessions = editSessions;
    }

    @OneToMany(mappedBy = "subProcess")
    public Set<Node> getParentProcesses() {
        return this.parentProcesses;
    }

    public void setParentProcesses(final Set<Node> newParentProcesses) {
        this.parentProcesses = newParentProcesses;
    }

    @OneToMany(mappedBy = "currentProcessModelVersion")
    public Set<ProcessBranch> getCurrentProcessModelVersion() {
        return this.currentProcessModelVersion;
    }

    public void setCurrentProcessModelVersion(final Set<ProcessBranch> newCurrentIds) {
        this.currentProcessModelVersion = newCurrentIds;
    }

    @OneToMany(mappedBy = "sourceProcessModelVersion")
    public Set<ProcessBranch> getSourceProcessModelVersion() {
        return this.sourceProcessModelVersion;
    }

    public void setSourceProcessModelVersion(final Set<ProcessBranch> newSourceIds) {
        this.sourceProcessModelVersion = newSourceIds;
    }


    @OneToMany(mappedBy = "processModelVersion", cascade = CascadeType.ALL, orphanRemoval = true)
    public Set<ProcessModelAttribute> getProcessModelAttributes() {
        return this.processModelAttributes;
    }

    public void setProcessModelAttributes(Set<ProcessModelAttribute> processModelAttributes) {
        this.processModelAttributes = processModelAttributes;
    }

    @OneToMany(mappedBy = "processModelVersion", cascade = CascadeType.ALL, orphanRemoval = true)
    public Set<Object> getObjects() {
        return this.objects;
    }

    public void setObjects(Set<Object> objectTypes) {
        this.objects = objectTypes;
    }

    @OneToMany(mappedBy = "processModelVersion", cascade = CascadeType.ALL, orphanRemoval = true)
    public Set<Resource> getResources() {
        return this.resources;
    }

    public void setResources(Set<Resource> resourceTypes) {
        this.resources = resourceTypes;
    }

}


