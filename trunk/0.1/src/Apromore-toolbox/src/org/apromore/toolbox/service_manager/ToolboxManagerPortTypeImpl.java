
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.apromore.toolbox.service_manager;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Logger;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.activation.DataHandler;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

import org.apromore.cpf.CanonicalProcessType;
import org.apromore.toolbox.da.RequestToDA;
import org.apromore.toolbox.model_da.CanonicalType;
import org.apromore.toolbox.model_da.CanonicalsType;
import org.apromore.toolbox.model_da.ProcessSummariesType;
import org.apromore.toolbox.model_da.ProcessVersionType;
import org.apromore.toolbox.model_da.ProcessVersionsType;
import org.apromore.toolbox.model_manager.AnnotationsType;
import org.apromore.toolbox.model_manager.MergeProcessesOutputMsgType;
import org.apromore.toolbox.model_manager.ParameterType;
import org.apromore.toolbox.model_manager.ProcessSummaryType;
import org.apromore.toolbox.model_manager.ResultType;
import org.apromore.toolbox.model_manager.VersionSummaryType;
import org.apromore.toolbox.similaritySearch.tools.MergeProcesses;
import org.apromore.toolbox.similaritySearch.tools.SearchForSimilarProcesses;

/**
 * This class was generated by Apache CXF 2.2.9
 * Mon Dec 06 11:47:01 CET 2010
 * Generated source version: 2.2.9
 * 
 */

@javax.jws.WebService(
                      serviceName = "ToolboxManagerService",
                      portName = "ToolboxManager",
                      targetNamespace = "http://www.apromore.org/toolbox/service_manager",
                      wsdlLocation = "http://localhost:8080/Apromore-toolbox/services/ToolboxManager?wsdl",
                      endpointInterface = "org.apromore.toolbox.service_manager.ToolboxManagerPortType")

		public class ToolboxManagerPortTypeImpl implements ToolboxManagerPortType {

	private static final Logger LOG = Logger.getLogger(ToolboxManagerPortTypeImpl.class.getName());

	public org.apromore.toolbox.model_manager.SearchForSimilarProcessesOutputMsgType 
	searchForSimilarProcesses(org.apromore.toolbox.model_manager.SearchForSimilarProcessesInputMsgType payload) { 
		LOG.info("Executing operation searchForSimilarProcesses");
		org.apromore.toolbox.model_manager.SearchForSimilarProcessesOutputMsgType res =
			new org.apromore.toolbox.model_manager.SearchForSimilarProcessesOutputMsgType();
		org.apromore.toolbox.model_manager.ResultType result = new org.apromore.toolbox.model_manager.ResultType();
		res.setResult(result);
		try {
			org.apromore.toolbox.da.RequestToDA request = new RequestToDA();

			org.apromore.toolbox.model_da.ProcessVersionsType idsDa = new ProcessVersionsType();
			// idsDa is a list of processVersion ids which empty
			List<CanonicalType> allCanonicals = request.ReadCanonicals(idsDa);
			CanonicalType search = null;
			for (int i=0;i<allCanonicals.size();i++) {
				if (allCanonicals.get(i).getProcessId() == payload.getProcessId() 
					&& allCanonicals.get(i).getVersionName().compareTo(payload.getVersionName())==0) {
					search = allCanonicals.get(i);
					break;
				}
			}
			if (search == null) {
				throw new Exception("Canonical not found.");
			}
			allCanonicals.remove(search);
			JAXBContext jc = JAXBContext.newInstance("org.apromore.cpf");
			Unmarshaller u = jc.createUnmarshaller();

			// search canonical model
			DataHandler search_cpf = search.getCpf();
			InputStream search_is = search_cpf.getInputStream();
			JAXBElement<CanonicalProcessType> rootElement = (JAXBElement<CanonicalProcessType>) u.unmarshal(search_is);
			CanonicalProcessType searchCpf = rootElement.getValue();

			String algorithm = payload.getAlgorithm();

			double modelthreshold = 0; 
			double labelthreshold = 0; 
			double contextthreshold = 0; 
			double skipnweight = 0; 
			double subnweight = 0; 
			double skipeweight = 0;		
			for (ParameterType p : payload.getParameters().getParameter()) {
				if ("modelthreshold".equals(p.getName())) {
					modelthreshold = p.getValue();
				} else if ("labelthreshold".equals(p.getName())) {
					labelthreshold = p.getValue();
				} else if ("contextthreshold".equals(p.getName())) {
					contextthreshold = p.getValue();
				} else if ("skipnweight".equals(p.getName())) {
					skipnweight = p.getValue();
				} else if ("subnweight".equals(p.getName())) {
					subnweight = p.getValue();
				} else if ("skipeweight".equals(p.getName())) {
					skipeweight = p.getValue();
				}
			}

			org.apromore.toolbox.model_da.ProcessVersionsType similarProcesses = 
				new ProcessVersionsType();
			double similarity;
			for (int j=0;j<allCanonicals.size();j++) {
				CanonicalType canonical = allCanonicals.get(j);
				// search canonical model
				DataHandler document_cpf = canonical.getCpf();
				InputStream document_is = document_cpf.getInputStream();
				JAXBElement<CanonicalProcessType> documentRootElement = 
					(JAXBElement<CanonicalProcessType>) u.unmarshal(document_is);
				CanonicalProcessType documentCpf = documentRootElement.getValue();
				similarity = SearchForSimilarProcesses.findProcessesSimilarity(
						searchCpf, documentCpf, algorithm, labelthreshold, contextthreshold, 
						skipnweight, subnweight, skipeweight); 
				if (similarity >= modelthreshold) {
					ProcessVersionType processVersion = new ProcessVersionType();
					processVersion.setProcessId(canonical.getProcessId());
					processVersion.setVersionName(canonical.getVersionName());
					similarProcesses.getProcessVersion().add(processVersion);
				}
			}
			// Send a message to DA to get process summary of similar process
			ProcessSummariesType processSummariesDA = request.ReadProcessSummaries(similarProcesses);
			org.apromore.toolbox.model_manager.ProcessSummariesType processSummariesM = 
				new org.apromore.toolbox.model_manager.ProcessSummariesType();
			for (org.apromore.toolbox.model_da.ProcessSummaryType pDA: processSummariesDA.getProcessSummary()) {
				org.apromore.toolbox.model_manager.ProcessSummaryType pM =
					new ProcessSummaryType();
				processSummariesM.getProcessSummary().add(pM);
				pM.setDomain(pDA.getDomain());
				pM.setId(pDA.getId());
				pM.setLastVersion(pDA.getLastVersion());
				pM.setName(pDA.getName());
				pM.setOriginalNativeType(pDA.getOriginalNativeType());
				pM.setOwner(pDA.getOwner());
				pM.setRanking(pDA.getRanking());
				for (org.apromore.toolbox.model_da.VersionSummaryType vDA: pDA.getVersionSummaries()) {
					org.apromore.toolbox.model_manager.VersionSummaryType vM =
						new VersionSummaryType();
					pM.getVersionSummaries().add(vM);
					vM.setCreationDate(vDA.getCreationDate());
					vM.setLastUpdate(vDA.getLastUpdate());
					vM.setName(vDA.getName());
					vM.setRanking(vDA.getRanking());
					for (org.apromore.toolbox.model_da.AnnotationsType aDA: vDA.getAnnotations()) {
						org.apromore.toolbox.model_manager.AnnotationsType aM =
							new AnnotationsType();
						vM.getAnnotations().add(aM);
						aM.setNativeType(aDA.getNativeType());
						aM.getAnnotationName().addAll(aDA.getAnnotationName());
					}
				}
			}
			res.setProcessSummaries(processSummariesM);
			result.setCode(0);
			result.setMessage("");
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
	}

	/* (non-Javadoc)
	 * @see org.apromore.toolbox.service_manager.ToolboxManagerPortType#mergeProcesses(org.apromore.toolbox.model_manager.MergeProcessesInputMsgType  payload )*
	 */

	public org.apromore.toolbox.model_manager.MergeProcessesOutputMsgType 
	mergeProcesses(org.apromore.toolbox.model_manager.MergeProcessesInputMsgType payload) { 
		LOG.info("Executing operation mergeProcesses");
		System.out.println(payload);
		org.apromore.toolbox.model_manager.MergeProcessesOutputMsgType res =
			new MergeProcessesOutputMsgType();
		org.apromore.toolbox.model_manager.ResultType result =
			new ResultType();
		res.setResult(result);
		try {
			String processName = payload.getProcessName();
			String versionName = payload.getVersionName();
			String userName = payload.getUsername();
			org.apromore.toolbox.model_da.ProcessVersionsType idsDa = new ProcessVersionsType();
			for (org.apromore.toolbox.model_manager.ProcessVersionIdType cpf: 
				payload.getProcessVersionIds().getProcessVersionId()) {
				org.apromore.toolbox.model_da.ProcessVersionType idDa = 
					new ProcessVersionType();
				idsDa.getProcessVersion().add(idDa);
				idDa.setProcessId(cpf.getProcessId());
				idDa.setVersionName(cpf.getVersionName()); 
			}
			
			// Send message to DA to get selected canonicals
			RequestToDA request = new RequestToDA();
			List<CanonicalType> canonicals = request.ReadCanonicals (idsDa);
			
			// Process merge of returned canonicals
			String algorithm = payload.getAlgorithm();
			boolean removeEntanglements = false;
			double modelthreshold = 0; 
			double labelthreshold = 0; 
			double contextthreshold = 0; 
			double skipnweight = 0; 
			double subnweight = 0; 
			double skipeweight = 0;		
			for (ParameterType p : payload.getParameters().getParameter()) {
				if ("modelthreshold".equals(p.getName())) {
					modelthreshold = p.getValue();
				} else if ("labelthreshold".equals(p.getName())) {
					labelthreshold = p.getValue();
				} else if ("contextthreshold".equals(p.getName())) {
					contextthreshold = p.getValue();
				} else if ("skipnweight".equals(p.getName())) {
					skipnweight = p.getValue();
				} else if ("subnweight".equals(p.getName())) {
					subnweight = p.getValue();
				} else if ("skipeweight".equals(p.getName())) {
					skipeweight = p.getValue();
				} else if ("removeent".equals(p.getName())) {
					removeEntanglements = p.getValue() == 1 ? true: false;
				}
			}

			LinkedList<CanonicalProcessType> toMerge = new LinkedList<CanonicalProcessType>();

			JAXBContext jc = JAXBContext.newInstance("org.apromore.cpf");
			Unmarshaller u = jc.createUnmarshaller();
			for (CanonicalType canonical : canonicals) {
				// search canonical model
				DataHandler document_cpf = canonical.getCpf();
				InputStream document_is = document_cpf.getInputStream();
				JAXBElement<CanonicalProcessType> documentRootElement = 
					(JAXBElement<CanonicalProcessType>) u.unmarshal(document_is);
				CanonicalProcessType documentCpf = documentRootElement.getValue();
				toMerge.add(documentCpf);
			}
			CanonicalProcessType merged = 
				MergeProcesses.mergeProcesses(
						toMerge, removeEntanglements, algorithm, 
						labelthreshold, contextthreshold, skipnweight, subnweight, skipeweight);

			//        	System.out.println("merged "+ merged);
            Marshaller m = jc.createMarshaller();
            m.setProperty(javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE );
            JAXBElement<CanonicalProcessType> rootcpf = new org.apromore.cpf.ObjectFactory().createCanonicalProcess(merged);
            ByteArrayOutputStream cpf_xml = new ByteArrayOutputStream();
            m.marshal(rootcpf, cpf_xml);
            InputStream cpf_is = new ByteArrayInputStream(cpf_xml.toByteArray());

			// Send message to DA to save merged process
			org.apromore.toolbox.model_da.ProcessSummaryType process = 
				request.StoreCpf(processName, versionName, userName, cpf_is);
			org.apromore.toolbox.model_manager.ProcessSummaryType processM =
				new ProcessSummaryType();
			org.apromore.toolbox.model_manager.VersionSummaryType versionM =
				new VersionSummaryType();
			processM.getVersionSummaries().add(versionM);
			// the returned process has one version, no annotations
			processM.setId(process.getId());
			processM.setLastVersion(process.getLastVersion());
			processM.setName(process.getName());
			processM.setOwner(process.getOwner());
			versionM.setCreationDate(process.getVersionSummaries().get(0).getCreationDate());
			versionM.setLastUpdate(process.getVersionSummaries().get(0).getLastUpdate());
			versionM.setName(process.getVersionSummaries().get(0).getName());
			versionM.setRanking(process.getVersionSummaries().get(0).getRanking());
			res.setProcessSummary(processM);
			result.setCode(0);
			result.setMessage("");
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
	}
}

