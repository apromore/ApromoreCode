
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.apromore.toolbox.service_manager;

import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Logger;

import javax.activation.DataHandler;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;

import org.apromore.cpf.CanonicalProcessType;
import org.apromore.toolbox.da.DAToolboxPortType;
import org.apromore.toolbox.da.DAToolboxService;
import org.apromore.toolbox.da.RequestToDA;
import org.apromore.toolbox.model_da.CanonicalType;
import org.apromore.toolbox.model_da.CpfIdType;
import org.apromore.toolbox.model_da.CpfIdsType;
import org.apromore.toolbox.model_da.ReadCanonicalsInputMsgType;
import org.apromore.toolbox.model_da.ReadCanonicalsOutputMsgType;
import org.apromore.toolbox.model_manager.ParameterType;
import org.apromore.toolbox.similaritySearch.tools.MergeProcesses;
import org.apromore.toolbox.similaritySearch.tools.SearchForSimilarProcesses;

/**
 * This class was generated by Apache CXF 2.2.9
 * Thu Nov 11 16:11:17 CET 2010
 * Generated source version: 2.2.9
 * 
 */

@javax.jws.WebService(
                      serviceName = "ToolboxManagerService",
                      portName = "ToolboxManager",
                      targetNamespace = "http://www.apromore.org/toolbox/service_manager",
                      wsdlLocation = "http://localhost:8080/Apromore-toolbox/services/ToolboxManager?wsdl",
                      endpointInterface = "org.apromore.toolbox.service_manager.ToolboxManagerPortType")
                      
public class ToolboxManagerPortTypeImpl implements ToolboxManagerPortType {

    private static final Logger LOG = Logger.getLogger(ToolboxManagerPortTypeImpl.class.getName());

    public org.apromore.toolbox.model_manager.SearchForSimilarProcessesOutputMsgType 
    searchForSimilarProcesses(org.apromore.toolbox.model_manager.SearchForSimilarProcessesInputMsgType payload) { 
        LOG.info("Executing operation searchForSimilarProcesses");
        org.apromore.toolbox.model_manager.SearchForSimilarProcessesOutputMsgType res =
        	new org.apromore.toolbox.model_manager.SearchForSimilarProcessesOutputMsgType();
        org.apromore.toolbox.model_manager.ResultType result = new org.apromore.toolbox.model_manager.ResultType();
        res.setResult(result);
        try {
        	org.apromore.toolbox.da.RequestToDA request = new RequestToDA();
        	List<CanonicalType> allCanonicals = request.ReadAllCanonicals();
        	CanonicalType search = null;
        	for (int i=0;i<allCanonicals.size();i++) {
        		if (allCanonicals.get(i).getProcessId() == payload.getProcessId()) {
        			search = allCanonicals.get(i);
        			break;
        		}
        	}
        	if (search == null) {
        		// TODO send the error back
        		throw new Exception("Canonical not found.");
        	}
        	allCanonicals.remove(search);
			JAXBContext jc = JAXBContext.newInstance("org.apromore.cpf");
			Unmarshaller u = jc.createUnmarshaller();

			// search canonical model
        	DataHandler search_cpf = search.getCpf();
        	InputStream search_is = search_cpf.getInputStream();
			JAXBElement<CanonicalProcessType> rootElement = (JAXBElement<CanonicalProcessType>) u.unmarshal(search_is);
			CanonicalProcessType searchCpf = rootElement.getValue();

			String algorithm = payload.getAlgorithm();
			
			double modelthreshold = 0; 
			double labelthreshold = 0; 
			double contextthreshold = 0; 
			double skipnweight = 0; 
			double subnweight = 0; 
			double skipeweight = 0;		
			for (ParameterType p : payload.getParameters().getParameter()) {
				if ("modelthreshold".equals(p.getName())) {
					modelthreshold = p.getValue();
				} else if ("labelthreshold".equals(p.getName())) {
					labelthreshold = p.getValue();
				} else if ("contextthreshold".equals(p.getName())) {
					contextthreshold = p.getValue();
				} else if ("skipnweight".equals(p.getName())) {
					skipnweight = p.getValue();
				} else if ("subnweight".equals(p.getName())) {
					subnweight = p.getValue();
				} else if ("skipeweight".equals(p.getName())) {
					skipeweight = p.getValue();
				}
			}
			for (int j=0;j<allCanonicals.size();j++) {
				CanonicalType canonical = allCanonicals.get(j);
    			// search canonical model
            	DataHandler document_cpf = canonical.getCpf();
            	InputStream document_is = document_cpf.getInputStream();
    			JAXBElement<CanonicalProcessType> documentRootElement = 
    				(JAXBElement<CanonicalProcessType>) u.unmarshal(document_is);
    			CanonicalProcessType documentCpf = documentRootElement.getValue();

        		double similarity = SearchForSimilarProcesses.findProcessesSimilarity(
        				searchCpf, documentCpf, algorithm, labelthreshold, contextthreshold, 
        				skipnweight, subnweight, skipeweight); 
        		if (similarity > modelthreshold) {
                    org.apromore.toolbox.model_manager.CanonicalType similarCpf = 
                    	new org.apromore.toolbox.model_manager.CanonicalType();
                    similarCpf.setProcessId(canonical.getProcessId());
                    similarCpf.setVersionName(canonical.getVersionName());
                    similarCpf.setCpf(canonical.getCpf());
                    res.getCanonicals().getCanonicalType().add(similarCpf);
        		}
                result.setCode(0);
                result.setMessage("");
        	}
        } catch (Exception ex) {
            ex.printStackTrace();
            result.setCode(-1);
            result.setMessage(ex.getMessage());
        }
        return res;
    }

    /* (non-Javadoc)
     * @see org.apromore.toolbox.service_manager.ToolboxManagerPortType#mergeProcesses(org.apromore.toolbox.model_manager.MergeProcessesInputMsgType  payload )*
     */
    public org.apromore.toolbox.model_manager.MergeProcessesOutputMsgType mergeProcesses(org.apromore.toolbox.model_manager.MergeProcessesInputMsgType payload) { 
        LOG.info("Executing operation mergeProcesses");
        System.out.println(payload);
        try {
        	
        	DAToolboxService manager = new DAToolboxService();
        	DAToolboxPortType port = manager.getDAToolbox();
        	ReadCanonicalsInputMsgType readCanonicals = new ReadCanonicalsInputMsgType();
        	CpfIdsType getCanonicals = new CpfIdsType();
        	
        	for (org.apromore.toolbox.model_manager.CpfIdType cpf: payload.getCpfIds().getCpfId()) {
        		CpfIdType idDa = new CpfIdType();
        		idDa.setProcessId(cpf.getProcessId());
        		idDa.setVersionName(cpf.getVersionName()); // TODO set versions
        		getCanonicals.getCpfId().add(idDa);
        	}
        	readCanonicals.setCpfIds(getCanonicals);
        	
        	ReadCanonicalsOutputMsgType allCanonicals = port.readCanonicals(readCanonicals);

            org.apromore.toolbox.model_manager.MergeProcessesOutputMsgType _return = new org.apromore.toolbox.model_manager.MergeProcessesOutputMsgType();
            org.apromore.toolbox.model_manager.ResultType _returnResult = new org.apromore.toolbox.model_manager.ResultType();
            _returnResult.setMessage("Message307363756");
            _returnResult.setCode(Integer.valueOf(-1235440356));
            _return.setResult(_returnResult);
            org.apromore.toolbox.model_manager.ProcessSummaryType _returnProcessSummary = new org.apromore.toolbox.model_manager.ProcessSummaryType();
        	
			JAXBContext jc = JAXBContext.newInstance("org.apromore.cpf");
			Unmarshaller u = jc.createUnmarshaller();

			String algorithm = payload.getAlgorithm();
			
			boolean removeEntanglements = false;
			double modelthreshold = 0; 
			double labelthreshold = 0; 
			double contextthreshold = 0; 
			double skipnweight = 0; 
			double subnweight = 0; 
			double skipeweight = 0;		
			for (ParameterType p : payload.getParameters().getParameter()) {
				if ("modelthreshold".equals(p.getName())) {
					modelthreshold = p.getValue();
				} else if ("labelthreshold".equals(p.getName())) {
					labelthreshold = p.getValue();
				} else if ("contextthreshold".equals(p.getName())) {
					contextthreshold = p.getValue();
				} else if ("skipnweight".equals(p.getName())) {
					skipnweight = p.getValue();
				} else if ("subnweight".equals(p.getName())) {
					subnweight = p.getValue();
				} else if ("skipeweight".equals(p.getName())) {
					skipeweight = p.getValue();
				} else if ("removeent".equals(p.getName())) {
					removeEntanglements = p.getValue() == 1 ? true: false;
				}
			}
			
			LinkedList<CanonicalProcessType> toMerge = new LinkedList<CanonicalProcessType>();

        	for (CanonicalType canonical : allCanonicals.getCanonicals().getCanonical()) {
    			// search canonical model
            	DataHandler document_cpf = canonical.getCpf();
            	InputStream document_is = document_cpf.getInputStream();
    			JAXBElement<CanonicalProcessType> documentRootElement = (JAXBElement<CanonicalProcessType>) u.unmarshal(document_is);
    			CanonicalProcessType documentCpf = documentRootElement.getValue();

    			toMerge.add(documentCpf);
        	}
        	CanonicalProcessType merged = MergeProcesses.mergeProcesses(toMerge, removeEntanglements, algorithm, labelthreshold, contextthreshold, skipnweight, subnweight, skipeweight);
        	
//        	System.out.println("merged "+ merged);
        	// TODO save the merged model to the database and return version summary
        	
            java.util.List<org.apromore.toolbox.model_manager.VersionSummaryType> _returnProcessSummaryVersionSummaries = new java.util.ArrayList<org.apromore.toolbox.model_manager.VersionSummaryType>();
            org.apromore.toolbox.model_manager.VersionSummaryType _returnProcessSummaryVersionSummariesVal1 = new org.apromore.toolbox.model_manager.VersionSummaryType();
            java.util.List<java.lang.String> _returnProcessSummaryVersionSummariesVal1Annotations = new java.util.ArrayList<java.lang.String>();
            _returnProcessSummaryVersionSummariesVal1.getAnnotations().addAll(_returnProcessSummaryVersionSummariesVal1Annotations);
            _returnProcessSummaryVersionSummariesVal1.setRanking("Ranking608953313");
            _returnProcessSummaryVersionSummariesVal1.setName("Name-126311915");
            _returnProcessSummaryVersionSummariesVal1.setDocumentation("Documentation-2105142744");
            _returnProcessSummaryVersionSummariesVal1.setLastUpdate("LastUpdate-1006903268");
            _returnProcessSummaryVersionSummariesVal1.setCreationDate("CreationDate-296696235");
            _returnProcessSummaryVersionSummaries.add(_returnProcessSummaryVersionSummariesVal1);
            _returnProcessSummary.getVersionSummaries().addAll(_returnProcessSummaryVersionSummaries);
            _returnProcessSummary.setOriginalNativeType("OriginalNativeType25325179");
            _returnProcessSummary.setName("Name-643073433");
            _returnProcessSummary.setId(Integer.valueOf(41890016));
            _returnProcessSummary.setDomain("Domain-469012261");
            _returnProcessSummary.setRanking("Ranking603106942");
            _returnProcessSummary.setLastVersion("LastVersion742221597");
            _returnProcessSummary.setOwner("Owner-1555668376");
            _return.setProcessSummary(_returnProcessSummary);
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

}
