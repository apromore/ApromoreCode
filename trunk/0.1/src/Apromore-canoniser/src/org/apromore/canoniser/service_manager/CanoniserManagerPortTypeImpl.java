
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.apromore.canoniser.service_manager;

import java.io.InputStream;
import java.util.logging.Logger;

import javax.activation.DataHandler;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;

import org.apromore.canoniser.adapters.EPML2Canonical;
import org.apromore.canoniser.adapters.XPDL2Canonical;
import org.apromore.canoniser.common.Constants;
import org.apromore.canoniser.da.RequestToDA;
import org.apromore.canoniser.model_manager.CanoniseProcessInputMsgType;
import org.apromore.canoniser.model_manager.CanoniseProcessOutputMsgType;
import org.apromore.canoniser.model_manager.DeCanoniseProcessInputMsgType;
import org.apromore.canoniser.model_manager.DeCanoniseProcessOutputMsgType;
import org.apromore.canoniser.model_manager.ResultType;
import org.wfmc._2008.xpdl2.PackageType;

import de.epml.TypeEPML;


/**
 * This class was generated by Apache CXF 2.2.7
 * Wed May 12 17:01:13 EST 2010
 * Generated source version: 2.2.7
 * 
 */

@javax.jws.WebService(
                      serviceName = "CanoniserManagerService",
                      portName = "CanoniserManager",
                      targetNamespace = "http://www.apromore.org/canoniser/service_manager",
                      wsdlLocation = "http://localhost:8080/Apromore-canoniser/services/CanoniserManager?wsdl",
                      endpointInterface = "org.apromore.canoniser.service_manager.CanoniserManagerPortType")

		public class CanoniserManagerPortTypeImpl implements CanoniserManagerPortType {

	private static final Logger LOG = Logger.getLogger(CanoniserManagerPortTypeImpl.class.getName());


	public DeCanoniseProcessOutputMsgType deCanoniseProcess(DeCanoniseProcessInputMsgType payload) { 
        LOG.info("Executing operation deCanoniseProcess");
        System.out.println(payload);
        DeCanoniseProcessOutputMsgType res = new DeCanoniseProcessOutputMsgType();
        ResultType result = new ResultType();
        res.setResult(result);
        
        try {
        	DataHandler handler = payload.getCpf();
        	InputStream cpf_xml = handler.getInputStream();
        	String nativeType = payload.getNativeType();
        	/**
			 * native type must be supported by apromore.
			 * At the moment: XPDL 2.1 adn EPML 2.0
			 */
			if (nativeType.compareTo("XPDL 2.1")==0) {
				
			} else if (nativeType.compareTo("EPML 2.0")==0) {
				
			} else {
				result.setCode(-1);
				result.setMessage("Native type not supported.");
			}
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
		return res;
    }


	/* (non-Javadoc)
	 * @see org.apromore.canoniser.service_manager.CanoniserManagerPortType#canoniseProcess(org.apromore.canoniser.model_manager.CanoniseProcessInputMsgType  payload )*
	 */
	public CanoniseProcessOutputMsgType canoniseProcess(CanoniseProcessInputMsgType payload) { 
		LOG.info("Executing operation canoniseProcess");
		System.out.println(payload);
		CanoniseProcessOutputMsgType res = new CanoniseProcessOutputMsgType();
		ResultType result = new ResultType();
		res.setResult(result);

		try {
			DataHandler handler = payload.getProcessDescription();
			InputStream process_xml = handler.getInputStream();
			String username = payload.getUsername();
			String nativeType = payload.getNativeType();
			String processName = payload.getProcessName();
			String domain = payload.getDomain();

			/**
			 * native type must be supported by apromore.
			 * At the moment: XPDL 2.1 adn EPML 2.0
			 */
			if (nativeType.compareTo("XPDL 2.1")==0) {
				JAXBContext jc1 = JAXBContext.newInstance(Constants.JAXB_CONTEXT_XPDL);
				Unmarshaller u = jc1.createUnmarshaller();
				JAXBElement<PackageType> rootElement = (JAXBElement<PackageType>) u.unmarshal(process_xml);
				PackageType pkg = rootElement.getValue();
				String versionName = null ;
				if (pkg.getRedefinableHeader() != null && pkg.getRedefinableHeader().getVersion() != null) {
					versionName = pkg.getRedefinableHeader().getVersion().getValue();
				}
				XPDL2Canonical xpdl2canonical = new XPDL2Canonical(pkg);
				RequestToDA request = new RequestToDA();
				request.StoreProcess (username, processName, domain, nativeType, versionName, handler.getInputStream(), 
						xpdl2canonical.getCpf(), 
						xpdl2canonical.getAnf());
				result.setCode(0);
				result.setMessage("");
			} else if (nativeType.compareTo("EPML 2.0")==0) {
				JAXBContext jc1 = JAXBContext.newInstance("de.epml");
				Unmarshaller u = jc1.createUnmarshaller();
				JAXBElement<TypeEPML> rootElement = (JAXBElement<TypeEPML>) u.unmarshal(process_xml);
				TypeEPML epml = rootElement.getValue();
				// version not found in epml xschema
				String versionName = null ;
				EPML2Canonical epml2canonical = new EPML2Canonical(epml);
				RequestToDA request = new RequestToDA();
				request.StoreProcess (username, processName, domain, nativeType, versionName, handler.getInputStream(), 
						epml2canonical.getCPF(), 
						epml2canonical.getANF());
				result.setCode(0);
				result.setMessage("");
			} else {
				result.setCode(-1);
				result.setMessage("Native type not supported.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
	}

}
