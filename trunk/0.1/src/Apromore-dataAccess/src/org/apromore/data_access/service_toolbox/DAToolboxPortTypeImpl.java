
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.apromore.data_access.service_toolbox;

import java.io.InputStream;
import java.util.logging.Logger;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.mail.util.ByteArrayDataSource;

import org.apromore.data_access.dao.ProcessDao;
import org.apromore.data_access.model_toolbox.CanonicalType;
import org.apromore.data_access.model_toolbox.CanonicalsType;
import org.apromore.data_access.model_toolbox.CpfIdsType;
import org.apromore.data_access.model_toolbox.ReadCanonicalsInputMsgType;
import org.apromore.data_access.model_toolbox.ReadCanonicalsOutputMsgType;
import org.apromore.data_access.model_toolbox.ResultType;
import org.apromore.data_access.model_toolbox.StoreCpfInputMsgType;
import org.apromore.data_access.model_toolbox.StoreCpfOutputMsgType;

/**
 * This class was generated by Apache CXF 2.2.9
 * Wed Aug 04 18:23:53 EST 2010
 * Generated source version: 2.2.9
 * 
 */

@javax.jws.WebService(
                      serviceName = "DAToolboxService",
                      portName = "DAToolbox",
                      targetNamespace = "http://www.apromore.org/data_access/service_toolbox",
                      wsdlLocation = "http://localhost:8080/Apromore-dataAccess/services/DAToolbox?wsdl",
                      endpointInterface = "org.apromore.data_access.service_toolbox.DAToolboxPortType")
                      
public class DAToolboxPortTypeImpl implements DAToolboxPortType {

    private static final Logger LOG = Logger.getLogger(DAToolboxPortTypeImpl.class.getName());

	/* (non-Javadoc)
     * @see org.apromore.data_access.service_toolbox.DAToolboxPortType#readCanonicals(org.apromore.data_access.model_toolbox.ReadCanonicalsInputMsgType  payload )*
     */
    public ReadCanonicalsOutputMsgType readCanonicals(ReadCanonicalsInputMsgType payload) { 
        LOG.info("Executing operation readCanonicals");
        ReadCanonicalsOutputMsgType res = new ReadCanonicalsOutputMsgType();
        ResultType result = new ResultType();
        res.setResult(result);
        CpfIdsType cpf_ids = payload.getCpfIds();
        CanonicalsType canonicals = new CanonicalsType();
        res.setCanonicals(canonicals);
        try {
            for (int i=0;i<cpf_ids.getCpfId().size();i++) {
            	Integer processId = cpf_ids.getCpfId().get(i).getProcessId();
            	String version = cpf_ids.getCpfId().get(i).getVersionName();
            	String cpf_st = ProcessDao.getInstance().getCanonical(processId, version);
            	CanonicalType cpf = new CanonicalType();
            	cpf.setProcessId(processId);
            	cpf.setVersionName(version);
    			DataSource source = new ByteArrayDataSource(cpf_st, "text/xml"); 
            	cpf.setCpf(new DataHandler(source));
            	canonicals.getCanonical().add(cpf);
            }
            result.setCode(0);
            result.setMessage("");
        } catch (Exception ex) {
        	result.setCode(-1);
        	result.setMessage(ex.getMessage());
        }
        return res;
    }

    /* (non-Javadoc)
     * @see org.apromore.data_access.service_toolbox.DAToolboxPortType#storeCpf(org.apromore.data_access.model_toolbox.StoreCpfInputMsgType  payload )*
     */
    public StoreCpfOutputMsgType storeCpf(StoreCpfInputMsgType payload) { 
        LOG.info("Executing operation storeCpf");
        StoreCpfOutputMsgType res = new StoreCpfOutputMsgType();
        ResultType result = new ResultType();
        res.setResult(result);
        String processName = payload.getProcessName();
        String versionName = payload.getVersion();
        String username = payload.getUsername();
        DataHandler handler = payload.getCpf();
        try {
            InputStream cpf_is = handler.getInputStream();
            ProcessDao.getInstance().storeCpf(processName, versionName, username,cpf_is);
            result.setCode(0);
            result.setMessage("");
        } catch (Exception ex) {
        	result.setCode(-1);
        	result.setMessage(ex.getMessage());
        }
        return res;
    }

}
