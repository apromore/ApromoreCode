
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.apromore.data_access.service_canoniser;

import java.io.InputStream;
import java.util.logging.Logger;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.activation.DataHandler;

import org.apromore.data_access.dao.ProcessDao;
import org.apromore.data_access.model_canoniser.ProcessSummaryType;
import org.apromore.data_access.model_canoniser.ResultType;
import org.apromore.data_access.model_canoniser.StoreNativeCpfInputMsgType;
import org.apromore.data_access.model_canoniser.StoreNativeCpfOutputMsgType;
import org.apromore.data_access.model_canoniser.StoreNativeInputMsgType;
import org.apromore.data_access.model_canoniser.StoreNativeOutputMsgType;
import org.apromore.data_access.model_canoniser.StoreVersionInputMsgType;
import org.apromore.data_access.model_canoniser.StoreVersionOutputMsgType;

/**
 * This class was generated by Apache CXF 2.2.7
 * Wed Jul 14 17:25:12 EST 2010
 * Generated source version: 2.2.7
 * 
 */

@javax.jws.WebService(
                      serviceName = "DACanoniserService",
                      portName = "DACanoniser",
                      targetNamespace = "http://www.apromore.org/data_access/service_canoniser",
                      wsdlLocation = "http://localhost:8080/Apromore-dataAccess/services/DACanoniser?wsdl",
                      endpointInterface = "org.apromore.data_access.service_canoniser.DACanoniserPortType")

		public class DACanoniserPortTypeImpl implements DACanoniserPortType {

	private static final Logger LOG = Logger.getLogger(DACanoniserPortTypeImpl.class.getName());


	public StoreVersionOutputMsgType storeVersion(StoreVersionInputMsgType payload) { 
        LOG.info("Executing operation storeVersion");
        System.out.println(payload);
        StoreVersionOutputMsgType res = new StoreVersionOutputMsgType();
		ResultType result = new ResultType();
		res.setResult(result);
		int processId = payload.getProcessId();
		String nativeType = payload.getNativeType();
		String domain = payload.getDomain(); // useless
		String annotation = payload.getAnnotationName();
		String preVersion = payload.getPreVersion();
		int editSessionCode = payload.getEditSessionCode();
        try {
			DataHandler handlernat = payload.getNative();
			InputStream native_is = handlernat.getInputStream();
			
			DataHandler handlercpf = payload.getCpf();
			InputStream cpf_is = handlercpf.getInputStream();
			
			DataHandler handleranf = payload.getAnf();
			InputStream anf_is = handleranf.getInputStream();
			ProcessDao.getInstance().storeVersion (editSessionCode, processId, preVersion, nativeType, annotation, native_is, cpf_is, anf_is);
        	result.setCode(0);
			result.setMessage("");
        } catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
        }
		return res;
    }


	public StoreNativeOutputMsgType storeNative(StoreNativeInputMsgType payload) { 
        LOG.info("Executing operation storeNative");
        System.out.println(payload);
        StoreNativeOutputMsgType res = new StoreNativeOutputMsgType();
		ResultType result = new ResultType();
		res.setResult(result);
		int processId = payload.getProcessId();
		String version = payload.getVersion();
		String nativeType = payload.getNativeType();
        
        try {
        	DataHandler handler = payload.getNative();
			InputStream native_xml = handler.getInputStream();
			ProcessDao.getInstance().storeNative(nativeType, processId, version, native_xml);
			result.setCode(0);
			result.setMessage("");
        } catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
        }
		return res;
    }

	/* (non-Javadoc)
	 * @see org.apromore.data_access.service_canoniser.DACanoniserPortType#storeNativeCpf(org.apromore.data_access.model_canoniser.StoreNativeCpfInputMsgType  payload )*
	 */
	public StoreNativeCpfOutputMsgType storeNativeCpf(StoreNativeCpfInputMsgType payload) { 
		LOG.info("Executing operation storeNativeCpf");
		System.out.println(payload);

		StoreNativeCpfOutputMsgType res = new StoreNativeCpfOutputMsgType();
		ResultType result = new ResultType();
		res.setResult(result);
		String username = payload.getUsername();
		String nativeType = payload.getNativeType();
		String processName = payload.getProcessName();
		String domain = payload.getDomain();
		String version = payload.getVersionName();
		String documentation = payload.getDocumentation();
		String created = payload.getCreationDate();
		String lastupdate = payload.getLastUpdate();
		
		try {
			DataHandler handler = payload.getNative();
			InputStream process_xml = handler.getInputStream();
			DataHandler handlercpf = payload.getCpf();
			InputStream cpf_xml = handlercpf.getInputStream();
			DataHandler handleranf = payload.getAnf();
			InputStream anf_xml = handleranf.getInputStream();
			
			ProcessSummaryType process = ProcessDao.getInstance().storeNativeCpf(username, processName, domain, 
					documentation, nativeType, version, created, lastupdate,
					process_xml, cpf_xml, anf_xml);
			res.setProcessSummary(process);
			result.setCode(0);
			result.setMessage("");
		} catch (Exception ex) {
			ex.printStackTrace();
			result.setCode(-1);
			result.setMessage(ex.getMessage());
		}
		return res;
	}

}
