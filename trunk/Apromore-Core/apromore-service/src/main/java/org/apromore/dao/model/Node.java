package org.apromore.dao.model;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.*;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Type;
import org.springframework.beans.factory.annotation.Configurable;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Node generated by hbm2java
 */
@Entity
@Table(name = "node",
        uniqueConstraints = {
                @UniqueConstraint(columnNames = {"uri"})
        }
)
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Configurable("node")
public class Node implements Serializable {

    /**
     * Hard coded for interoperability.
     */
    private static final long serialVersionUID = -5232538404638485548L;

    private Integer id;
    private String uri;
    private String name;
    private String type;
    private String ctype;
    private String originalId;
    private Boolean configuration = false;

    private Content content;
    private ProcessModelVersion subVersion;

    private Set<NonPocketNode> nonPocketNodes = new HashSet<NonPocketNode>(0);
    private Set<Edge> edgesForSourceVid = new HashSet<Edge>(0);
    private Set<Edge> edgesForTargetVid = new HashSet<Edge>(0);

    private Set<ObjectRefType> objectRefTypes = new HashSet<ObjectRefType>(0);
    private Set<ResourceRefType> resourceRefTypes = new HashSet<ResourceRefType>(0);
    private Set<NodeAttribute> attributes = new HashSet<NodeAttribute>(0);

    /**
     * Public Constructor.
     */
    public Node() { }


    /**
     * returns the Id of this Object.
     * @return the id
     */
    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    /**
     * Sets the Id of this Object
     * @param id the new Id.
     */
    public void setId(final Integer id) {
        this.id = id;
    }


    /**
     * The URI of this fragmentVersion.
     * @return the uri
     */
    @Column(name = "uri", length = 40)
    public String getUri() {
        return this.uri;
    }

    /**
     * The URI of this fragmentVersion.
     * @param newUri the new uri.
     */
    public void setUri(final String newUri) {
        this.uri = newUri;
    }

    @Column(name = "name", length = 2000)
    public String getName() {
        return this.name;
    }

    public void setName(final String newName) {
        this.name = newName;
    }


    @Column(name = "type", length = 100)
    public String getType() {
        return this.type;
    }

    public void setType(final String newType) {
        this.type = newType;
    }

    @Column(name = "original_Id", length = 40)
    public String getOriginalId() {
        return this.originalId;
    }

    public void setOriginalId(final String newOriginalId) {
        this.originalId = newOriginalId;
    }

    @Column(name = "ctype", length = 40)
    public String getCtype() {
        return this.ctype;
    }

    public void setCtype(final String newCtype) {
        this.ctype = newCtype;
    }

    @Type(type = "boolean")
    @Column(name = "configuration", length = 1)
    public Boolean getConfiguration() {
        return this.configuration;
    }

    public void setConfiguration(final Boolean newConfigurable) {
        this.configuration = newConfigurable;
    }


    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "contentId")
    public Content getContent() {
        return this.content;
    }

    public void setContent(final Content newContent) {
        this.content = newContent;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "subVersionId")
    public ProcessModelVersion getSubVersion() {
        return this.subVersion;
    }

    public void setSubVersion(final ProcessModelVersion newSubVersion) {
        this.subVersion = newSubVersion;
    }


    @OneToMany(fetch = FetchType.LAZY, mappedBy = "verticesBySourceVid")
    public Set<Edge> getEdgesForSourceVid() {
        return this.edgesForSourceVid;
    }

    public void setEdgesForSourceVid(final Set<Edge> newEdgesForSourceVid) {
        this.edgesForSourceVid = newEdgesForSourceVid;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "verticesByTargetVid")
    public Set<Edge> getEdgesForTargetVid() {
        return this.edgesForTargetVid;
    }

    public void setEdgesForTargetVid(final Set<Edge> newEdgesForTargetVid) {
        this.edgesForTargetVid = newEdgesForTargetVid;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "node")
    public Set<NonPocketNode> getNonPocketNodes() {
        return this.nonPocketNodes;
    }

    public void setNonPocketNodes(final Set<NonPocketNode> nonPocketNodes) {
        this.nonPocketNodes = nonPocketNodes;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "node")
    public Set<ResourceRefType> getResourceRefTypes() {
        return this.resourceRefTypes;
    }

    public void setResourceRefTypes(Set<ResourceRefType> resourceRefTypes) {
        this.resourceRefTypes = resourceRefTypes;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "node")
    public Set<ObjectRefType> getObjectRefTypes() {
        return this.objectRefTypes;
    }

    public void setObjectRefTypes(Set<ObjectRefType> objectRefTypes) {
        this.objectRefTypes = objectRefTypes;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "node")
    public Set<NodeAttribute> getAttributes() {
        return this.attributes;
    }

    public void setAttributes(Set<NodeAttribute> newAttributes) {
        this.attributes = newAttributes;
    }
}


