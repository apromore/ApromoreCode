<?component name="menuitem" extends="menuitem" autocheck="true" checkmark="true" ?>
<!--
 ~ Copyright Â© 2019 The University of Melbourne.
 ~
 ~ This file is part of "Apromore".
 ~
 ~ "Apromore" is free software; you can redistribute it and/or modify
 ~ it under the terms of the GNU Lesser General Public License as
 ~ published by the Free Software Foundation; either version 3 of the
 ~ License, or (at your option) any later version.
 ~
 ~ "Apromore" is distributed in the hope that it will be useful, but
 ~ WITHOUT ANY WARRANTY; without even the implied warranty
 ~ of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 ~ See the GNU Lesser General Public License for more details.
 ~
 ~ You should have received a copy of the GNU Lesser General Public
 ~ License along with this program.
 ~ If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 -->

<?page title="Apromore - Process Discoverer" contentType="text/html;charset=UTF-8" ?>
<?link rel="shortcut icon" href="/img/favicon.ico" ?>
<zk xmlns="http://www.zkoss.org/2005/zul"
    xmlns:h="http://www.w3.org/1999/xhtml"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.zkoss.org/2005/zul http://www.zkoss.org/2005/zul/zul.xsd"
    xmlns:x="xhtml" xmlns:zk="zk" xmlns:w="client">
	
	<style src="/css/apromoreOld.css"/>
	<style src="/css/site.css"/>
	<style src="/css/cytoscape-context-menus.css"/>
	
	<script type="text/javascript" src="/js/jquery.js"></script>
	<script src="/js/pdf.v1.10.100.js"></script>
	<script src="/js/jspdf.v1.4.1.debug.js"></script>
	<script src="/js/canvas2svg.v1.0.19.js"></script>
	<script src="/js/cytoscape.v3.2.18.min.js"></script>
	<script src="/js/cytoscape-edgehandles.v3.2.4.js"></script>
	<script src="/js/cytoscape-svg-convertor.js"></script>
	<script src="/js/klay.v0.4.1.js"></script>
	<script src="/js/cytoscape-klay.v3.1.1.js"></script>
	<script src="/js/dagre.v0.8.2.min.js"></script>
	<script src="/js/cytoscape-dagre.v2.2.2.js"></script>
	<script src="/js/cola.v3.3.8.min.js"></script>
	<script src="/js/cytoscape-cola.v2.2.3.js"></script>
	<script src="/js/cytoscape-cose-bilkent.v4.0.0.js"></script>
	<script src="/js/cytoscape-edge-bend-editing.v1.6.0.js"></script>
	<script src="/js/cytoscape-undo-redo.js"></script>
	<script src="/js/cytoscape-context-menus.v3.0.6.js"></script>
	
	<style dynamic="true">
		tr.z-row td.z-row-inner, tr.z-row td.z-cell, tr.z-group td.z-group-inner, tr.z-groupfoot td.z-groupfoot-inner {
			padding: 1px 1px 1px 1px;
		}
		td.z-listcell {
			border: 1px solid transparent;
		}
		tr.z-row td.z-row-inner, tr.z-row .z-cell {
			line-height: 25px;
		}
		div.z-listbox-body .z-listcell {
			padding: 0;
		}
		tr.z-row td.z-row-inner, tr.z-row .z-cell, tr.z-row {
			background: none repeat scroll 0% 0% white;
		}
		tr.z-grid-odd td.z-row-inner, tr.z-grid-odd .z-cell, tr.z-grid-odd, td.z-listcell {
			background: none repeat scroll 0% 0% rgb(240, 250, 255);
		}
		
		tr.z-row-disabled td.z-row-inner {
			padding: 1px 1px 1px 1px;
			line-height: 25px;
			background: none repeat scroll 0% 0% rgb(220,220,220);
		}
		
		div.z-listcell-cnt {
			line-height: 25px;
			padding: 1px 0;
		}
		.z-listbox-autopaging .z-listcell-cnt {
			/*height: 25px;*/
			overflow: hidden;
			vertical-align: middle;
		}
		tbody.z-listbox-empty-body tr {
			color: #000000;
			height: 25px;
			font-size: 12px;
			font-weight: normal;
			text-decoration: none;
		}
		tbody.z-listbox-empty-body td {
			color: #7D7D7D;
			line-height: 25px;
			font-family: arial,sans-serif;
			font-size: 12px;
			font-style: italic;
			font-weight: normal;
			text-align: center;
		}
		
		.z-caption.customIcon .z-caption-content {
			width: 100%;
		}

		.z-caption.customIcon {
			background: url("") no-repeat right 0;
			height: 16px;
			padding-right: 20px;
			font-weight: bold;
			float: right;
		}

		.z-caption.customIcon {
			background-position: right -16px;
		}

		.mainCaption {
			display: flex;
		}

		.mainCaption .z-caption-content {
			display: flex; flex-grow: 1;
		}

		.mainCaption .z-caption-content > .captionButtons {
			display: inline-block;
			flex-grow: 1;
			text-align: right;
			margin-right: 1px;
		}

		.captionButton {
			font-size: 18px;
			margin: 0px 0px 0px -1px;
			padding: 2px 6px;
			border: 1px solid #cfcfcf;
			color: #636363;
		}
		
		.open-true {float:right; background:url('/img/up.png')
		no-repeat right 0; height: 20px; padding-right: 20px;
		font-weight: bold; }

		.open-false {float:right; background:url('/img/down.png')
		no-repeat right 0; height: 20px; padding-right: 20px;
		font-weight: bold; }
	</style>
		
	<window id="win" border="none" closable="false" height="100%" width="100%" use="org.apromore.plugin.processdiscoverer.ProcessDiscovererController">
		<caption id="windowcaption" sclass="mainCaption">
			<a href="https://apromore.org/documentation/features/discover-process-map" target="_blank" sclass="captionButtons">
				<button label="Help" image="/img/Help-16x16.png" style="float: right;" height="25px"></button>
			</a>
		</caption>

		<vbox>
			<radiogroup id="sv1" onCheck="choice1.value = self.selectedItem.label" />
			<groupbox id="optionbox" closable="false" mold="3d" open="true">
				<attribute name="onOpen">
					<![CDATA[
						//arrow.setSclass("open-" + self.isOpen());
					]]>
				</attribute>
				<caption id="optionlabel" label="Options" width="100%" sclass="customIcon" >
					<!--<span id="arrow" class="open-true" />-->
					<!--<div id="arrow" class="open-true"></div> -->
				</caption>
				<hbox align="center" id="optiondetails">
					<vbox align="left" pack="center" width="80px">
						<hbox align="center">
							<vbox align="left" pack="center" width="90px">
								<groupbox closable="false"><caption height="20px">Slider</caption>
									<vbox align="left" pack="top">
										<radio id="use_fixed" label="Locked" selected="true" radiogroup="sv1" width="100px"/>
										<radio id="use_dynamic" label="Unlocked" radiogroup="sv1" width="100px"/>
									</vbox>
								</groupbox>
							</vbox>
							<vbox align="left" pack="center" width="80px" height="85px">
								<checkbox id="gateways" checked="false" label="BPMN" height="30px" width="100px" />
								<checkbox id="secondary" checked="false" label="Dual Info" height="30px" width="100px"/>
							</vbox>
						</hbox>
						<vbox align="left" pack="top">
							<checkbox id="inverted_nodes" checked="false" label="Invert Priority Nodes" height="30px" width="100px"/>
							<checkbox id="inverted_arcs" checked="false" label="Invert Priority Arcs" height="30px" width="100px"/>
						</vbox>
					</vbox>
					<grid>
						<columns>
							<column width="55px"/>
							<column width="50%"/>
							<column width="40px"/>
						</columns>
						<rows>
							<row height="21px">
								<label>Activities</label>
								<slider id="slider1" mold="scale" maxpos="100" width="100%" curpos="100"/>
								<intbox id="activityText" value="100" width="35px" />
							</row>
							<row height="21px">
								<label>Arcs</label>
								<slider id="slider2" mold="scale" maxpos="100" width="100%" curpos="10"/>
								<intbox id="arcText" value="10" width="35px" />
							</row>
							<row id="parallelismRow" height="21px">
								<label id="parallelismLabel">Parallelism</label>
								<slider id="parallelismSlider" mold="scale" maxpos="100" width="100%" curpos="40" />
								<intbox id="parallelismText" value="40" width="35px" />
							</row>
						</rows>
					</grid>
					<grid>
						<columns>
							<column width="12.5%"/>
							<column width="12.5%"/>
							<column width="12.5%"/>
							<column width="12.5%"/>
							<column width="12.5%"/>
							<column width="12.5%"/>
							<column width="12.5%"/>
							<column width="12.5%"/>
						</columns>
						<rows>
							<row height="58px">
								<label>Cases</label>
								<label>Unique Cases</label>
								<label>Events</label>
								<label>Activities</label>
								<label>Mean Duration</label>
								<label>Median Duration</label>
								<label>Max Duration</label>
								<label>Min Duration</label>
							</row>
							<row height="58px">
								<label id="caseNumber">Cases</label>
								<label id="uniquecaseNumber">Unique Cases</label>
								<label id="eventNumber">Events</label>
								<label id="activityNumber">Activities</label>
								<label id="meanDuration">Activities</label>
								<label id="medianDuration">Activities</label>
								<label id="maxDuration">Activities</label>
								<label id="minDuration">Activities</label>
							</row>
						</rows>
					</grid>
				</hbox>
			</groupbox>
			<grid id="actionband">
				<columns>
					<column width="10%"/>
					<column width="10%"/>
					<column width="10%"/>
					<column width="10%"/>
					<column width="10%"/>
					<column width="7.5%"/>
					<column width="7.5%"/>
					<column width="7.5%"/>
					<column width="7.5%"/>
					<column width="10%"/>
				</columns>
				<rows>
					<row align="center">
						<combobutton id="selector" label="Selector">
							<menupopup id="selectormenu" />
						</combobutton>
						<combobutton id="frequency" label="Frequency" onClick="case_frequency.setChecked(true);absolute_frequency.setChecked(false);mean_frequency.setChecked(false);median_frequency.setChecked(false);mode_frequency.setChecked(false);max_frequency.setChecked(false);min_frequency.setChecked(false)">
							<menupopup>
								<menuitem id="case_frequency" label="Case" checked="true" onCheck='absolute_frequency.setChecked(false);mean_frequency.setChecked(false);median_frequency.setChecked(false);mode_frequency.setChecked(false);max_frequency.setChecked(false);min_frequency.setChecked(false)' />
								<menuitem id="absolute_frequency" label="Cumulative" onCheck='case_frequency.setChecked(false);mean_frequency.setChecked(false);median_frequency.setChecked(false);mode_frequency.setChecked(false);max_frequency.setChecked(false);min_frequency.setChecked(false)' />
								<menuitem id="mean_frequency" label="Mean" onCheck='absolute_frequency.setChecked(false);case_frequency.setChecked(false);median_frequency.setChecked(false);mode_frequency.setChecked(false);max_frequency.setChecked(false);min_frequency.setChecked(false)' />
								<menuitem id="median_frequency" label="Median" onCheck='absolute_frequency.setChecked(false);case_frequency.setChecked(false);mean_frequency.setChecked(false);mode_frequency.setChecked(false);max_frequency.setChecked(false);min_frequency.setChecked(false)' />
								<menuitem id="mode_frequency" label="Mode" onCheck='absolute_frequency.setChecked(false);case_frequency.setChecked(false);mean_frequency.setChecked(false);median_frequency.setChecked(false);max_frequency.setChecked(false);min_frequency.setChecked(false)' />
								<menuitem id="max_frequency" label="Max" onCheck='absolute_frequency.setChecked(false);case_frequency.setChecked(false);mean_frequency.setChecked(false);median_frequency.setChecked(false);mode_frequency.setChecked(false);min_frequency.setChecked(false)' />
								<menuitem id="min_frequency" label="Min" onCheck='absolute_frequency.setChecked(false);case_frequency.setChecked(false);mean_frequency.setChecked(false);median_frequency.setChecked(false);mode_frequency.setChecked(false);max_frequency.setChecked(false)' />
							</menupopup>
						</combobutton>
						<combobutton id="duration" label="Duration" onClick="total_duration.setChecked(false);median_duration.setChecked(false);mean_duration.setChecked(true);max_duration.setChecked(false);min_duration.setChecked(false)">
							<menupopup>
								<menuitem id="total_duration" label="Cumulative" onCheck='median_duration.setChecked(false);mean_duration.setChecked(false);max_duration.setChecked(false);min_duration.setChecked(false)' />
								<menuitem id="mean_duration" label="Mean" checked="true" onCheck='median_duration.setChecked(false);total_duration.setChecked(false);max_duration.setChecked(false);min_duration.setChecked(false)' />
								<menuitem id="median_duration" label="Median" onCheck='total_duration.setChecked(false);mean_duration.setChecked(false);max_duration.setChecked(false);min_duration.setChecked(false)' />
								<menuitem id="max_duration" label="Max" onCheck='median_duration.setChecked(false);mean_duration.setChecked(false);total_duration.setChecked(false);min_duration.setChecked(false)' />
								<menuitem id="min_duration" label="Min" onCheck='median_duration.setChecked(false);mean_duration.setChecked(false);max_duration.setChecked(false);total_duration.setChecked(false)' />
							</menupopup>
						</combobutton>
						<combobutton id="layout" label="Layout">
							<menupopup>
								<menuitem id="layout_breadthfirst" onClick='Clients.evalJavaScript("layout_breadthfirst(false)")' label="Breadth-First" />
								<menuitem id="layout_cola" onClick='Clients.evalJavaScript("layout_cola(false)")' label="Cola" />
								<menuitem id="layout_cose" onClick='Clients.evalJavaScript("layout_cose(false)")' label="Cose" />
								<menuitem id="layout_dagre_lr" onClick='Clients.evalJavaScript("layout_dagre_LR(false)")' label="Dagre Left-Right" checked="true" />
								<menuitem id="layout_dagre_tb" onClick='Clients.evalJavaScript("layout_dagre_TB(false)")' label="Dagre Top-Bottom" />
								<menuitem id="layout_klay_lr" onClick='Clients.evalJavaScript("layout_klay_LR(false)")' label="Klay Left-Right" />
								<menuitem id="layout_klay_tb" onClick='Clients.evalJavaScript("layout_klay_TB(false)")' label="Klay Top-Bottom" />
							</menupopup>
						</combobutton>
						<combobutton id="export" label="Export">
							<menupopup>
								<menuitem id="exportUnfitted" onClick='Clients.evalJavaScript("exportUnfitted()")' label="Save as filtered log..." onCheck='exportUnfitted.setChecked(false)'/>
								<menuitem id="exportBPMN" label="Save as BPMN Model..." onCheck='exportBPMN.setChecked(false)'/>
								<menuitem id="exportBPMNAnnotatedForBIMP" label="Save as BPMN model annotated for BIMP..." onCheck='exportBPMNAnnotatedForBIMP.setChecked(false)'/>
								<menuitem id="downloadPDF" label="Export map as PDF" onCheck='downloadPDF.setChecked(false)'/>
								<menuitem id="downloadPNG" label="Export map as PNG" onCheck='downloadPNG.setChecked(false)'/>
							</menupopup>
						</combobutton>
						<button id="details" label="Activities" />
						<button id="cases" label="Cases" />
						<button id="fitness" label="Fitness" />
						<button id="filter" label="Filter" />
						<button id="animate" onClick='Clients.evalJavaScript("animate()")' label="Animate" />
					</row>
				</rows>
			</grid>
			<n:div id="cy" xmlns:n="native" style="height:80vh; width:100%;" />
		</vbox>
	</window>

	<script src="https://cdnjs.cloudflare.com/ajax/libs/svg.js/2.6.5/svg.min.js"></script>
	<script type="text/javascript">
		<![CDATA[
		var layout_model = 4, ctrlIsPressed = !1, altIsPressed = !1;
		var currentZoomLevel = 1;
		var currentPanPosition;
		var initialLoaded = true; // whether the graph is first open.
		var loadTraceMode = false; // indidate that the graph is loading a trace, not a full log
		
		$(document).keydown(function(a) {
		  if (a.ctrlKey || 17 == a.keyCode || 17 == a.which) ctrlIsPressed = !0;
		  if (a.altKey || 18 == a.keyCode || 18 == a.which) altIsPressed = !0;
		}).keyup(function() {
		  altIsPressed = ctrlIsPressed = !1;
		  //console.log(ctrlIsPressed);
		  //console.log(altIsPressed)
		});

		function init() {
		  var a = window.cy = cytoscape({
			container: document.getElementById("cy"),
			layout: {
			  name: "dagre",
			  padding: 10
			},
			zoom: 1,
			minZoom: 1E-50,
			maxZoom: 1E50,
			zoomingEnabled: !0,
			userZoomingEnabled: !0,
			panningEnabled: !0,
			userPanningEnabled: !0,
			wheelSensitivity: .1,
			style: [{
			  selector: "node",
			  style: {
				"background-color": "data(color)",
				"border-color": "black",
				"border-width": "data(borderwidth)",
				color: "data(textcolor)",
				content: "data(name)",
				"font-size": "data(textsize)",
				height: "data(height)",
				padding: 5,
				shape: "data(shape)",
				"text-border-width": 10,
				"text-max-width": "data(textwidth)",
				"text-valign": "center",
				"text-wrap": "wrap",
				width: "data(width)"
			  }
			}, {
			  selector: ":selected",
			  style: {
				"border-width": 4,
				"border-color": "#333"
			  }
			}, {
			  selector: "edge",
			  style: {
				color: "data(color)",
				"curve-style": "bezier",
				"edge-text-rotation": 0,
				"font-size": 11,
				label: "data(label)",
				"line-color": "data(color)",
				"line-style": "data(style)",
				"loop-sweep": 181,
				"loop-direction": -41,
				opacity: 1,
				"source-arrow-color": "data(color)",
				"target-arrow-color": "data(color)",
				"target-arrow-shape": "triangle",
				"text-background-color": "#ffffff",
				"text-background-opacity": 1,
				"text-background-padding": 5,
				"text-background-shape": "roundrectangle",
				"text-wrap": "wrap",
				width: "mapData(strength, 0, 100, 1, 6)"
			  }
			}, {
			  selector: "edge.questionable",
			  style: {
				"line-style": "dotted",
				"target-arrow-shape": "diamond"
			  }
			}, {
			  selector: ".faded",
			  style: {
				opacity: .25,
				"text-opacity": 0
			  }
			}],
			elements: {
			  nodes: [],
			  edges: []
			}
		  });
		  
		  a.on("cxttap", "edge", function(a) {
			if (!loadTraceMode) removeEdge(a)
		  });
		  
		  a.on("cxttap", "node", function(a) {
			if (!loadTraceMode) removeNode(a)
		  });
		  
		  a.on("zoom", function(event) {
			if (!loadTraceMode) currentZoomLevel = a.zoom();
		  });
		  
		  a.on("pan", function(event) {
			if (!loadTraceMode) currentPanPosition = a.pan();
		  });		  
		}

		function reset() {
		  cy.elements().remove();
		}

		function load(a) {
		  loadTraceMode = false;
		  reset();
		  // need to store the current zoom and pan level as the load function
		  // will reset them through the zoom and pan events.
		  var zoom = currentZoomLevel; 
		  var pan = currentPanPosition;
		  cy.add($.parseJSON(a)); 
		  layout();
		  if (!initialLoaded) {
			  window.cy.zoom(zoom);
			  window.cy.pan(pan);
			  currentZoomLevel = zoom;
			  currentPanPosition = pan;
		  }
		  else {
			  initialLoaded = false;
		  }
		}
		
		function loadTrace(a) {
		  loadTraceMode = true;
		  reset();
		  cy.add($.parseJSON(a)); 
		  layout_dagre_LR(false);
		}

		function horizontal() {
		  cy.style().selector("edge").style({
			"curve-style": "bezier",
			opacity: 1,
			width: "mapData(strength, 0, 100, 1, 6)",
			"target-arrow-shape": "triangle",
			color: "data(color)",
			"line-color": "data(color)",
			"source-arrow-color": "data(color)",
			"target-arrow-color": "data(color)",
			label: "data(label)",
			"line-style": "data(style)",
			"font-size": 11,
			"text-background-color": "#ffffff",
			"text-background-opacity": 1,
			"text-background-padding": 5,
			"text-background-shape": "roundrectangle",
			"edge-text-rotation": 0
		  }).update()
		}

		function vertical() {
		  cy.style().selector("edge").style({
			"curve-style": "bezier",
			opacity: 1,
			width: "mapData(strength, 0, 100, 1, 6)",
			"target-arrow-shape": "triangle",
			color: "data(color)",
			"line-color": "data(color)",
			"source-arrow-color": "data(color)",
			"target-arrow-color": "data(color)",
			label: "data(label)",
			"line-style": "data(style)",
			"font-size": 11,
			"text-background-color": "#ffffff",
			"text-background-opacity": 1,
			"text-background-padding": 5,
			"text-background-shape": "roundrectangle",
			"edge-text-rotation": 0
		  }).update()
		}

		function layout() {
			switch(layout_model) {
				case 1:
					layout_breadthfirst(!0);
					break;
				case 2:
					layout_cola(!0);
					break;
				case 3:
					layout_cose(!0);
					break;
				case 4:
					layout_dagre_LR(!0);
					break;
				case 5:
					layout_dagre_TB(!0);		
					break;			
				case 6:
					layout_klay_LR(!0);	
					break;		
				case 7:
					layout_klay_TB(!0);	
					break;				
				default:
					// code block
			}
		}

		function layout_breadthfirst(a) {
		  layout_model = 1;
		  cy.elements().layout({
			name: "breadthfirst",
			directed: !0,
			spacingFactor: 1
		  }).run()
		  
		  zk.Widget.$(jq("$layout_breadthfirst")[0]).setChecked(true);
		  zk.Widget.$(jq("$layout_cola")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_cose")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_dagre_lr")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_dagre_tb")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_klay_lr")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_klay_tb")[0]).setChecked(false);
		}

		function layout_cola(a) {
		  layout_model = 2;
		  cy.elements().layout({
			name: "cola",
			animate: !1,
			nodeSpacing: function(a) {
			  return 25
			},
			flow: {
			  axis: "x",
			  minSeparation: 150
			}
		  }).run()
		  
		  zk.Widget.$(jq("$layout_breadthfirst")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_cola")[0]).setChecked(true);
		  zk.Widget.$(jq("$layout_cose")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_dagre_lr")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_dagre_tb")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_klay_lr")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_klay_tb")[0]).setChecked(false);
		}

		function pos(a, b) {
		  var c = 0,
			e = 0,
			d;
		  for (d in a.incomers().sources().outgoers().targets()) c += d.position()[0], e += 1;
		  return 0 == e ? 0 : c / e
		}

		function layout_cose(a) {
		  layout_model = 3;
		  cy.elements().layout({
			name: "cose-bilkent",
			avoidOverlap: !0,
			nodeRepulsion: 1E4,
			nestingFactor: 1,
			idealEdgeLength: 75,
			edgeElasticity: 1,
			animate: !1,
			randomize: a
		  }).run()
		  
		  zk.Widget.$(jq("$layout_breadthfirst")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_cola")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_cose")[0]).setChecked(true);
		  zk.Widget.$(jq("$layout_dagre_lr")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_dagre_tb")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_klay_lr")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_klay_tb")[0]).setChecked(false);
		}

		function layout_dagre_LR(a) {
		  layout_model = 4;
		  cy.elements().layout({
			name: "dagre",
			avoidOverlap: !0,
			edgeSep: 50,
			nodeSep: 110,
			randomize: a,
			rankDir: "LR",
			ranker: "tight-tree"
		  }).run()
		  
		  zk.Widget.$(jq("$layout_breadthfirst")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_cola")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_cose")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_dagre_lr")[0]).setChecked(true);
		  zk.Widget.$(jq("$layout_dagre_tb")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_klay_lr")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_klay_tb")[0]).setChecked(false);
		}

		function layout_dagre_TB(a) {
		  layout_model = 5;
		  cy.elements().layout({
			name: "dagre",
			avoidOverlap: !0,
			edgeSep: 50,
			nodeSep: 110,
			randomize: a,
			rankDir: "TB",
			ranker: "tight-tree"
		  }).run()
		  
		  zk.Widget.$(jq("$layout_breadthfirst")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_cola")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_cose")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_dagre_lr")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_dagre_tb")[0]).setChecked(true);
		  zk.Widget.$(jq("$layout_klay_lr")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_klay_tb")[0]).setChecked(false);
		}

		function layout_klay_LR(a) {
		  layout_model = 6;
		  cy.elements().layout({
			name: "klay",
			klay: {
			  spacing: 50,
			  addUnnecessaryBendpoints: !0,
			  direction: "RIGHT",
			  edgeSpacingFactor: .1,
			  edgeRouting: "POLYLINE",
			  fixedAlignment: "BALANCED",
			  inLayerSpacingFactor: 2,
			  layoutHierarchy: !0,
			  linearSegmentsDeflectionDampening: 1,
			  nodeLayering: "LONGEST_PATH",
			  nodePlacement: "LINEAR_SEGMENTS",
			  routeSelfLoopInside: !0,
			  thoroughness: 10
			}
		  }).run()
		  
		  zk.Widget.$(jq("$layout_breadthfirst")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_cola")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_cose")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_dagre_lr")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_dagre_tb")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_klay_lr")[0]).setChecked(true);
		  zk.Widget.$(jq("$layout_klay_tb")[0]).setChecked(false);
		}

		function layout_klay_TB(a) {
		  layout_model = 7;
		  cy.elements().layout({
			name: "klay",
			klay: {
			  spacing: 50,
			  addUnnecessaryBendpoints: !0,
			  direction: "DOWN",
			  edgeSpacingFactor: .1,
			  edgeRouting: "POLYLINE",
			  fixedAlignment: "BALANCED",
			  inLayerSpacingFactor: 2,
			  layoutHierarchy: !0,
			  linearSegmentsDeflectionDampening: 1,
			  nodeLayering: "LONGEST_PATH",
			  nodePlacement: "LINEAR_SEGMENTS",
			  routeSelfLoopInside: !0,
			  thoroughness: 10
			}
		  }).run()
		  
		  zk.Widget.$(jq("$layout_breadthfirst")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_cola")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_cose")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_dagre_lr")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_dagre_tb")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_klay_lr")[0]).setChecked(false);
		  zk.Widget.$(jq("$layout_klay_tb")[0]).setChecked(true);
		}

		function removeEdge(a) {
		  var b = a.target;
		  a = b.source();
		  b = b.target();
		  a = a.data("name");
		  a = a.substring(0, a.indexOf("\n"));
		  if (a == "") {
			  a = "|>";
		  }
		  b = b.data("name");
		  b = b.substring(0, b.indexOf("\n"));
		  if (b == "") {
			  b = "[]";
		  }
		  a = a.concat(" => ", b);
		  if (ctrlIsPressed) {
				zAu.send(new zk.Event(zk.Widget.$("$animate"), "onEdgeRetained", a));
			}
			else {
				zAu.send(new zk.Event(zk.Widget.$("$animate"), "onEdgeRemoved", a));
			}
		}

		function removeNode(a, b) {
		  var c = a.target;
		  if (c.data("name") != "") {
			  c = c.data("name");
			  c = c.substring(0, c.indexOf("\n"));
			  console.log("CTRL " + ctrlIsPressed);
			  console.log("ALT " + altIsPressed);
				if (ctrlIsPressed || altIsPressed) {
					if (ctrlIsPressed && !altIsPressed) {
						zAu.send(new zk.Event(zk.Widget.$("$animate"), "onNodeRetainedTrace", c));
					}
					else if (!ctrlIsPressed && altIsPressed) {
						zAu.send(new zk.Event(zk.Widget.$("$animate"), "onNodeRemovedEvent", c));
					}
					else {
						zAu.send(new zk.Event(zk.Widget.$("$animate"), "onNodeRetainedEvent", c));
					}
				}
				else {
					zAu.send(new zk.Event(zk.Widget.$("$animate"), "onNodeRemovedTrace", c));
				}
		  }
		}

		function rediscover() {
		  var a = cy.json();
		  zAu.send(new zk.Event(zk.Widget.$("$animate"), "onNodeFiltered", a))
		}

		function animate() {
		  var a = cy.json();
		  zAu.send(new zk.Event(zk.Widget.$("$animate"), "onAnimate", a))
		}

		function exportFitted() {
		  var a = cy.json();
		  zAu.send(new zk.Event(zk.Widget.$("$exportFitted"), "onExport", a))
		}

		function exportUnfitted() {
		  var a = cy.json();
		  zAu.send(new zk.Event(zk.Widget.$("$exportUnfitted"), "onExport", a))
		}

		function downloadPDF(a) {
		  var b = new Image;
		  b.src = "/img/apromore_logo.png";
		  b.style.height = "395px";
		  b.style.width = "390px";
		  b.onload = function() {
			var c = new Image;
			c.src = "data:image/png;base64," + cy.png({
			  full: !0,
			  output: "base64"
			});
			c.onload = function() {
			  var e = document.createElement("canvas"),
				d = e.getContext("2d");
			  e.width = c.width + b.width + 40;
			  e.height = c.height + b.height + 40;
			  d.fillStyle = "white";
			  d.fillRect(0, 0, e.width, e.height);
			  d.drawImage(c, 20, b.height + 20);
			  d.drawImage(b, c.width + 20, 20);
			  d.font = "900 50px Arial";
			  d.fillStyle =
				"black";
			  d.fillText("Apromore", c.width + 100, 450);
			  var g = new jsPDF("l", "pt", "a1"),
				f = new Image;
			  f.src = e.toDataURL();
			  f.onload = function() {
				for (var b = f.width, c = f.height, d = 1; 2300 < d * b || 1600 < d * c;) 2300 < d * b && (d = 2300 / b), 1600 < d * c && (d = 1600 / c);
				g.addImage(f, "PNG", 40, 40, d * b, d * c);
				g.save(a + ".pdf")
			  }
			}
		  }
		}

		function downloadPNG(a) {
		  var b = new Image;
		  b.src = "/img/apromore_logo.png";
		  b.style.height = "395px";
		  b.style.width = "390px";
		  b.onload = function() {
			var c = new Image;
			c.src = "data:image/png;base64," + cy.png({
			  full: !0,
			  output: "base64"
			});
			c.onload = function() {
			  var e = document.createElement("canvas"),
				d = e.getContext("2d");
			  e.width = c.width + b.width + 40;
			  e.height = c.height + b.height + 40;
			  d.fillStyle = "white";
			  d.fillRect(0, 0, e.width, e.height);
			  d.drawImage(c, 20, b.height + 20);
			  d.drawImage(b, c.width + 20, 20);
			  d.font = "900 50px Arial";
			  d.fillStyle =
				"black";
			  d.fillText("Apromore", c.width + 100, 450);
			  d = document.createElement("a");
			  d.href = e.toDataURL();
			  d.download = a + ".png";
			  d.click()
			}
		  }
		}
		
		zk.afterMount(function() {
		  init();
		  zAu.send(new zk.Event(zk.Widget.$("$win"), "onLoaded"))
		  window.cy.fit();
		});
	]]>
	</script>	
	
    <!-- Following script improves performance of listbox dropdown display time-->
    <script defer="true">
        <![CDATA[
            zul.inp.Combobox.prototype.slideDown_ = function(pp) {
                pp.style.visibility = "visible";
                pp.style.display = "block";
            };
            zul.inp.Bandbox.prototype.slideDown_ = zul.inp.Combobox.prototype.slideDown_;
        ]]>
    </script>
</zk>
